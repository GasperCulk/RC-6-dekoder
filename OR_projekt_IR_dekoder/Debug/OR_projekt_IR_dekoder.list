
OR_projekt_IR_dekoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008730  08008730  00018730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800873c  0800873c  0001873c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08008740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c8  24000010  08008750  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002d8  08008750  000202d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018d26  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002856  00000000  00000000  00038da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000013d8  00000000  00000000  0003b600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f8e  00000000  00000000  0003c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039575  00000000  00000000  0003d966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018fed  00000000  00000000  00076edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001790da  00000000  00000000  0008fec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000056b8  00000000  00000000  00208fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  0020e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800867c 	.word	0x0800867c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800867c 	.word	0x0800867c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 f9d9 	bl	80019a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f823 	bl	8000638 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f2:	f000 f899 	bl	8000728 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fa3d 	bl	8000a74 <MX_GPIO_Init>
  MX_ADC3_Init();
 80005fa:	f000 f93d 	bl	8000878 <MX_ADC3_Init>
  MX_ADC1_Init();
 80005fe:	f000 f8c3 	bl	8000788 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000602:	f000 f99d 	bl	8000940 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f9e9 	bl	80009dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800060a:	4809      	ldr	r0, [pc, #36]	; (8000630 <main+0x4c>)
 800060c:	f006 fb52 	bl	8006cb4 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN) == GPIO_PIN_RESET)
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <main+0x50>)
 8000616:	f002 fda5 	bl	8003164 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1f7      	bne.n	8000610 <main+0x2c>
		  {
			uint32_t message = decodeIRSignal();
 8000620:	f000 fe1c 	bl	800125c <decodeIRSignal>
 8000624:	6078      	str	r0, [r7, #4]
			sendMessage(message);
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 fe80 	bl	800132c <sendMessage>
	  if (HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN) == GPIO_PIN_RESET)
 800062c:	e7f0      	b.n	8000610 <main+0x2c>
 800062e:	bf00      	nop
 8000630:	240000f4 	.word	0x240000f4
 8000634:	58021c00 	.word	0x58021c00

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b09c      	sub	sp, #112	; 0x70
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000642:	224c      	movs	r2, #76	; 0x4c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f007 ffd8 	bl	80085fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2220      	movs	r2, #32
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f007 ffd2 	bl	80085fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000658:	2002      	movs	r0, #2
 800065a:	f002 fdb5 	bl	80031c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <SystemClock_Config+0xe4>)
 8000664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000666:	4a2d      	ldr	r2, [pc, #180]	; (800071c <SystemClock_Config+0xe4>)
 8000668:	f023 0301 	bic.w	r3, r3, #1
 800066c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <SystemClock_Config+0xe4>)
 8000670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <SystemClock_Config+0xe8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000680:	4a27      	ldr	r2, [pc, #156]	; (8000720 <SystemClock_Config+0xe8>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <SystemClock_Config+0xe8>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000694:	bf00      	nop
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xe8>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a2:	d1f8      	bne.n	8000696 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <SystemClock_Config+0xec>)
 80006a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a8:	f023 0303 	bic.w	r3, r3, #3
 80006ac:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <SystemClock_Config+0xec>)
 80006ae:	f043 0302 	orr.w	r3, r3, #2
 80006b2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006b4:	2303      	movs	r3, #3
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006be:	2301      	movs	r3, #1
 80006c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	2340      	movs	r3, #64	; 0x40
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fdb4 	bl	800323c <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006da:	f000 ff11 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	233f      	movs	r3, #63	; 0x3f
 80006e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2101      	movs	r1, #1
 8000702:	4618      	mov	r0, r3
 8000704:	f003 f9f4 	bl	8003af0 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800070e:	f000 fef7 	bl	8001500 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3770      	adds	r7, #112	; 0x70
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58000400 	.word	0x58000400
 8000720:	58024800 	.word	0x58024800
 8000724:	58024400 	.word	0x58024400

08000728 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0b0      	sub	sp, #192	; 0xc0
 800072c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	22c0      	movs	r2, #192	; 0xc0
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f007 ff61 	bl	80085fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800074a:	230c      	movs	r3, #12
 800074c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800074e:	2304      	movs	r3, #4
 8000750:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800075a:	23c0      	movs	r3, #192	; 0xc0
 800075c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800075e:	2320      	movs	r3, #32
 8000760:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000766:	2300      	movs	r3, #0
 8000768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fd4a 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800077a:	f000 fec1 	bl	8001500 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	37c0      	adds	r7, #192	; 0xc0
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ac:	4b2f      	ldr	r3, [pc, #188]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ae:	4a30      	ldr	r2, [pc, #192]	; (8000870 <MX_ADC1_Init+0xe8>)
 80007b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b2:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_ADC1_Init+0xe4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007b8:	4b2c      	ldr	r3, [pc, #176]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_ADC1_Init+0xe4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_ADC1_Init+0xe4>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_ADC1_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_ADC1_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_ADC1_Init+0xe4>)
 80007d8:	2201      	movs	r2, #1
 80007da:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_ADC1_Init+0xe4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_ADC1_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_ADC1_Init+0xe4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_ADC1_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_ADC1_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_ADC1_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <MX_ADC1_Init+0xe4>)
 800080a:	f001 fb09 	bl	8001e20 <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000814:	f000 fe74 	bl	8001500 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4812      	ldr	r0, [pc, #72]	; (800086c <MX_ADC1_Init+0xe4>)
 8000824:	f002 f92c 	bl	8002a80 <HAL_ADCEx_MultiModeConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800082e:	f000 fe67 	bl	8001500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_ADC1_Init+0xec>)
 8000834:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000836:	2306      	movs	r3, #6
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000842:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000844:	2304      	movs	r3, #4
 8000846:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_ADC1_Init+0xe4>)
 8000856:	f001 fc85 	bl	8002164 <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000860:	f000 fe4e 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2400002c 	.word	0x2400002c
 8000870:	40022000 	.word	0x40022000
 8000874:	4b840000 	.word	0x4b840000

08000878 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_ADC3_Init+0xb8>)
 8000892:	4a28      	ldr	r2, [pc, #160]	; (8000934 <MX_ADC3_Init+0xbc>)
 8000894:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_ADC3_Init+0xb8>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_ADC3_Init+0xb8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <MX_ADC3_Init+0xb8>)
 80008e8:	f001 fa9a 	bl	8001e20 <HAL_ADC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80008f2:	f000 fe05 	bl	8001500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_ADC3_Init+0xc0>)
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fa:	2306      	movs	r3, #6
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_ADC3_Init+0xc4>)
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000906:	2304      	movs	r3, #4
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_ADC3_Init+0xb8>)
 8000918:	f001 fc24 	bl	8002164 <HAL_ADC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000922:	f000 fded 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	24000090 	.word	0x24000090
 8000934:	58026000 	.word	0x58026000
 8000938:	04300002 	.word	0x04300002
 800093c:	47ff0000 	.word	0x47ff0000

08000940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_TIM2_Init+0x98>)
 8000960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000964:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_TIM2_Init+0x98>)
 8000968:	223f      	movs	r2, #63	; 0x3f
 800096a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_TIM2_Init+0x98>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_TIM2_Init+0x98>)
 8000974:	f04f 32ff 	mov.w	r2, #4294967295
 8000978:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_TIM2_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_TIM2_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000986:	4814      	ldr	r0, [pc, #80]	; (80009d8 <MX_TIM2_Init+0x98>)
 8000988:	f006 f93c 	bl	8006c04 <HAL_TIM_Base_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000992:	f000 fdb5 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_TIM2_Init+0x98>)
 80009a4:	f006 f9f6 	bl	8006d94 <HAL_TIM_ConfigClockSource>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009ae:	f000 fda7 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_TIM2_Init+0x98>)
 80009c0:	f006 fc24 	bl	800720c <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009ca:	f000 fd99 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	240000f4 	.word	0x240000f4

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <MX_USART3_UART_Init+0x94>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a26:	f006 fc7f 	bl	8007328 <HAL_UART_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 fd66 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a38:	f007 fd15 	bl	8008466 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a42:	f000 fd5d 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a4a:	f007 fd4a 	bl	80084e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 fd54 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a5a:	f007 fccb 	bl	80083f4 <HAL_UARTEx_DisableFifoMode>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f000 fd4c 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	24000140 	.word	0x24000140
 8000a70:	40004800 	.word	0x40004800

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	; 0x40
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a8a:	4bbe      	ldr	r3, [pc, #760]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4abc      	ldr	r2, [pc, #752]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4bba      	ldr	r3, [pc, #744]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4bb6      	ldr	r3, [pc, #728]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4ab5      	ldr	r2, [pc, #724]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4bb2      	ldr	r3, [pc, #712]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ac6:	4baf      	ldr	r3, [pc, #700]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4aad      	ldr	r2, [pc, #692]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4bab      	ldr	r3, [pc, #684]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae0:	623b      	str	r3, [r7, #32]
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae4:	4ba7      	ldr	r3, [pc, #668]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4aa6      	ldr	r2, [pc, #664]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4ba3      	ldr	r3, [pc, #652]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4ba0      	ldr	r3, [pc, #640]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a9e      	ldr	r2, [pc, #632]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b9c      	ldr	r3, [pc, #624]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b20:	4b98      	ldr	r3, [pc, #608]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a97      	ldr	r2, [pc, #604]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b28:	f043 0310 	orr.w	r3, r3, #16
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b94      	ldr	r3, [pc, #592]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b3e:	4b91      	ldr	r3, [pc, #580]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a8f      	ldr	r2, [pc, #572]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b8d      	ldr	r3, [pc, #564]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5c:	4b89      	ldr	r3, [pc, #548]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a88      	ldr	r2, [pc, #544]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b85      	ldr	r3, [pc, #532]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	4b82      	ldr	r3, [pc, #520]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a80      	ldr	r2, [pc, #512]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b7e      	ldr	r3, [pc, #504]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b7a      	ldr	r3, [pc, #488]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	4a79      	ldr	r2, [pc, #484]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba8:	4b76      	ldr	r3, [pc, #472]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb6:	4b73      	ldr	r3, [pc, #460]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a71      	ldr	r2, [pc, #452]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000bbe:	f043 0320 	orr.w	r3, r3, #32
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b6f      	ldr	r3, [pc, #444]	; (8000d84 <MX_GPIO_Init+0x310>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0320 	and.w	r3, r3, #32
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bda:	486b      	ldr	r0, [pc, #428]	; (8000d88 <MX_GPIO_Init+0x314>)
 8000bdc:	f002 fada 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2104      	movs	r1, #4
 8000be4:	4869      	ldr	r0, [pc, #420]	; (8000d8c <MX_GPIO_Init+0x318>)
 8000be6:	f002 fad5 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf0:	4867      	ldr	r0, [pc, #412]	; (8000d90 <MX_GPIO_Init+0x31c>)
 8000bf2:	f002 facf 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	4866      	ldr	r0, [pc, #408]	; (8000d94 <MX_GPIO_Init+0x320>)
 8000bfc:	f002 faca 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8000c00:	23f0      	movs	r3, #240	; 0xf0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c10:	230a      	movs	r3, #10
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	485b      	ldr	r0, [pc, #364]	; (8000d88 <MX_GPIO_Init+0x314>)
 8000c1c:	f002 f8f2 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8000c20:	f242 0320 	movw	r3, #8224	; 0x2020
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000c32:	2309      	movs	r3, #9
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4854      	ldr	r0, [pc, #336]	; (8000d90 <MX_GPIO_Init+0x31c>)
 8000c3e:	f002 f8e1 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000c42:	23fc      	movs	r3, #252	; 0xfc
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c52:	230e      	movs	r3, #14
 8000c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	484e      	ldr	r0, [pc, #312]	; (8000d98 <MX_GPIO_Init+0x324>)
 8000c5e:	f002 f8d1 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c74:	230a      	movs	r3, #10
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4847      	ldr	r0, [pc, #284]	; (8000d9c <MX_GPIO_Init+0x328>)
 8000c80:	f002 f8c0 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000c84:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c96:	230c      	movs	r3, #12
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	483f      	ldr	r0, [pc, #252]	; (8000da0 <MX_GPIO_Init+0x32c>)
 8000ca2:	f002 f8af 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000ca6:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cb8:	230e      	movs	r3, #14
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4831      	ldr	r0, [pc, #196]	; (8000d88 <MX_GPIO_Init+0x314>)
 8000cc4:	f002 f89e 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000cc8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cda:	230c      	movs	r3, #12
 8000cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	482f      	ldr	r0, [pc, #188]	; (8000da4 <MX_GPIO_Init+0x330>)
 8000ce6:	f002 f88d 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cea:	2340      	movs	r3, #64	; 0x40
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d02:	4619      	mov	r1, r3
 8000d04:	4822      	ldr	r0, [pc, #136]	; (8000d90 <MX_GPIO_Init+0x31c>)
 8000d06:	f002 f87d 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	481a      	ldr	r0, [pc, #104]	; (8000d90 <MX_GPIO_Init+0x31c>)
 8000d26:	f002 f86d 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000d2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d44:	4619      	mov	r1, r3
 8000d46:	4815      	ldr	r0, [pc, #84]	; (8000d9c <MX_GPIO_Init+0x328>)
 8000d48:	f002 f85c 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000d4c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d5e:	230e      	movs	r3, #14
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d66:	4619      	mov	r1, r3
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <MX_GPIO_Init+0x318>)
 8000d6a:	f002 f84b 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	e012      	b.n	8000da8 <MX_GPIO_Init+0x334>
 8000d82:	bf00      	nop
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58022000 	.word	0x58022000
 8000d8c:	58022400 	.word	0x58022400
 8000d90:	58020400 	.word	0x58020400
 8000d94:	58020000 	.word	0x58020000
 8000d98:	58022800 	.word	0x58022800
 8000d9c:	58021800 	.word	0x58021800
 8000da0:	58020800 	.word	0x58020800
 8000da4:	58021000 	.word	0x58021000
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	48bb      	ldr	r0, [pc, #748]	; (80010a0 <MX_GPIO_Init+0x62c>)
 8000db2:	f002 f827 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db6:	2304      	movs	r3, #4
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	48b4      	ldr	r0, [pc, #720]	; (80010a4 <MX_GPIO_Init+0x630>)
 8000dd2:	f002 f817 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000de8:	2303      	movs	r3, #3
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df0:	4619      	mov	r1, r3
 8000df2:	48ad      	ldr	r0, [pc, #692]	; (80010a8 <MX_GPIO_Init+0x634>)
 8000df4:	f002 f806 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000df8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e0a:	2309      	movs	r3, #9
 8000e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e12:	4619      	mov	r1, r3
 8000e14:	48a4      	ldr	r0, [pc, #656]	; (80010a8 <MX_GPIO_Init+0x634>)
 8000e16:	f001 fff5 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2a:	230b      	movs	r3, #11
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	489d      	ldr	r0, [pc, #628]	; (80010ac <MX_GPIO_Init+0x638>)
 8000e36:	f001 ffe5 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4894      	ldr	r0, [pc, #592]	; (80010a0 <MX_GPIO_Init+0x62c>)
 8000e4e:	f001 ffd9 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000e52:	2330      	movs	r3, #48	; 0x30
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000e62:	230a      	movs	r3, #10
 8000e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	488f      	ldr	r0, [pc, #572]	; (80010ac <MX_GPIO_Init+0x638>)
 8000e6e:	f001 ffc9 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e84:	230c      	movs	r3, #12
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4888      	ldr	r0, [pc, #544]	; (80010b0 <MX_GPIO_Init+0x63c>)
 8000e90:	f001 ffb8 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000e94:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea6:	230c      	movs	r3, #12
 8000ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4880      	ldr	r0, [pc, #512]	; (80010b4 <MX_GPIO_Init+0x640>)
 8000eb2:	f001 ffa7 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4873      	ldr	r0, [pc, #460]	; (80010a0 <MX_GPIO_Init+0x62c>)
 8000ed2:	f001 ff97 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000ed6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	486b      	ldr	r0, [pc, #428]	; (80010a0 <MX_GPIO_Init+0x62c>)
 8000ef4:	f001 ff86 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	486a      	ldr	r0, [pc, #424]	; (80010b8 <MX_GPIO_Init+0x644>)
 8000f0e:	f001 ff79 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f24:	4619      	mov	r1, r3
 8000f26:	4865      	ldr	r0, [pc, #404]	; (80010bc <MX_GPIO_Init+0x648>)
 8000f28:	f001 ff6c 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f46:	4619      	mov	r1, r3
 8000f48:	485b      	ldr	r0, [pc, #364]	; (80010b8 <MX_GPIO_Init+0x644>)
 8000f4a:	f001 ff5b 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_P_Pin USB_OTG_FS2_N_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8000f4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f60:	230a      	movs	r3, #10
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4853      	ldr	r0, [pc, #332]	; (80010b8 <MX_GPIO_Init+0x644>)
 8000f6c:	f001 ff4a 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f82:	230b      	movs	r3, #11
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4845      	ldr	r0, [pc, #276]	; (80010a4 <MX_GPIO_Init+0x630>)
 8000f8e:	f001 ff39 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000f92:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fac:	4619      	mov	r1, r3
 8000fae:	4844      	ldr	r0, [pc, #272]	; (80010c0 <MX_GPIO_Init+0x64c>)
 8000fb0:	f001 ff28 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4835      	ldr	r0, [pc, #212]	; (80010a4 <MX_GPIO_Init+0x630>)
 8000fce:	f001 ff19 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4833      	ldr	r0, [pc, #204]	; (80010b4 <MX_GPIO_Init+0x640>)
 8000fe8:	f001 ff0c 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4831      	ldr	r0, [pc, #196]	; (80010c4 <MX_GPIO_Init+0x650>)
 8001000:	f001 ff00 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001004:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001016:	2309      	movs	r3, #9
 8001018:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800101a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101e:	4619      	mov	r1, r3
 8001020:	4827      	ldr	r0, [pc, #156]	; (80010c0 <MX_GPIO_Init+0x64c>)
 8001022:	f001 feef 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001038:	230a      	movs	r3, #10
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	481f      	ldr	r0, [pc, #124]	; (80010c0 <MX_GPIO_Init+0x64c>)
 8001044:	f001 fede 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001048:	233e      	movs	r3, #62	; 0x3e
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001058:	230b      	movs	r3, #11
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001060:	4619      	mov	r1, r3
 8001062:	4816      	ldr	r0, [pc, #88]	; (80010bc <MX_GPIO_Init+0x648>)
 8001064:	f001 fece 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001068:	230c      	movs	r3, #12
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001078:	230b      	movs	r3, #11
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	4619      	mov	r1, r3
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <MX_GPIO_Init+0x634>)
 8001084:	f001 febe 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001088:	2386      	movs	r3, #134	; 0x86
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001098:	230b      	movs	r3, #11
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800109c:	e014      	b.n	80010c8 <MX_GPIO_Init+0x654>
 800109e:	bf00      	nop
 80010a0:	58020c00 	.word	0x58020c00
 80010a4:	58022000 	.word	0x58022000
 80010a8:	58021c00 	.word	0x58021c00
 80010ac:	58021000 	.word	0x58021000
 80010b0:	58020400 	.word	0x58020400
 80010b4:	58021800 	.word	0x58021800
 80010b8:	58020000 	.word	0x58020000
 80010bc:	58020800 	.word	0x58020800
 80010c0:	58021400 	.word	0x58021400
 80010c4:	58022800 	.word	0x58022800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010cc:	4619      	mov	r1, r3
 80010ce:	485e      	ldr	r0, [pc, #376]	; (8001248 <MX_GPIO_Init+0x7d4>)
 80010d0:	f001 fe98 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010d4:	23e0      	movs	r3, #224	; 0xe0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e4:	230c      	movs	r3, #12
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ec:	4619      	mov	r1, r3
 80010ee:	4857      	ldr	r0, [pc, #348]	; (800124c <MX_GPIO_Init+0x7d8>)
 80010f0:	f001 fe88 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001106:	4619      	mov	r1, r3
 8001108:	4850      	ldr	r0, [pc, #320]	; (800124c <MX_GPIO_Init+0x7d8>)
 800110a:	f001 fe7b 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 800110e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001114:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	4849      	ldr	r0, [pc, #292]	; (800124c <MX_GPIO_Init+0x7d8>)
 8001126:	f001 fe6d 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800112a:	2340      	movs	r3, #64	; 0x40
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800113a:	2309      	movs	r3, #9
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001142:	4619      	mov	r1, r3
 8001144:	4840      	ldr	r0, [pc, #256]	; (8001248 <MX_GPIO_Init+0x7d4>)
 8001146:	f001 fe5d 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800114a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115c:	230e      	movs	r3, #14
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001164:	4619      	mov	r1, r3
 8001166:	4839      	ldr	r0, [pc, #228]	; (800124c <MX_GPIO_Init+0x7d8>)
 8001168:	f001 fe4c 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800116c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800117e:	2309      	movs	r3, #9
 8001180:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001186:	4619      	mov	r1, r3
 8001188:	4831      	ldr	r0, [pc, #196]	; (8001250 <MX_GPIO_Init+0x7dc>)
 800118a:	f001 fe3b 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 800118e:	2303      	movs	r3, #3
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800119e:	230b      	movs	r3, #11
 80011a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	482a      	ldr	r0, [pc, #168]	; (8001254 <MX_GPIO_Init+0x7e0>)
 80011aa:	f001 fe2b 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80011ae:	2304      	movs	r3, #4
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4824      	ldr	r0, [pc, #144]	; (8001258 <MX_GPIO_Init+0x7e4>)
 80011c6:	f001 fe1d 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e0:	4619      	mov	r1, r3
 80011e2:	481c      	ldr	r0, [pc, #112]	; (8001254 <MX_GPIO_Init+0x7e0>)
 80011e4:	f001 fe0e 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011fa:	2305      	movs	r3, #5
 80011fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001202:	4619      	mov	r1, r3
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <MX_GPIO_Init+0x7e0>)
 8001206:	f001 fdfd 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800120a:	2308      	movs	r3, #8
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121e:	4619      	mov	r1, r3
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <MX_GPIO_Init+0x7d4>)
 8001222:	f001 fdef 	bl	8002e04 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001226:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800122a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800122e:	f000 fc55 	bl	8001adc <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001232:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001236:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800123a:	f000 fc4f 	bl	8001adc <HAL_SYSCFG_AnalogSwitchConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800123e:	bf00      	nop
 8001240:	3740      	adds	r7, #64	; 0x40
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	58020000 	.word	0x58020000
 800124c:	58021c00 	.word	0x58021c00
 8001250:	58020c00 	.word	0x58020c00
 8001254:	58020400 	.word	0x58020400
 8001258:	58022400 	.word	0x58022400

0800125c <decodeIRSignal>:

/* USER CODE BEGIN 4 */

uint32_t decodeIRSignal()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b09a      	sub	sp, #104	; 0x68
 8001260:	af00      	add	r7, sp, #0
    uint32_t signal = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	667b      	str	r3, [r7, #100]	; 0x64

    // 16000 to skip to the last 8 bits, 200 to mesure in the 1/4 of a periode
    //  8960 to skip to the last 16 bits
    //  3680 to skip to the first bit
    delay_x(3680);
 8001266:	f44f 6066 	mov.w	r0, #3680	; 0xe60
 800126a:	f000 f845 	bl	80012f8 <delay_x>

    // (3 + ) 1 strat bit, 3 field bits, 1 (2 peridos) toggle bit, 8 addres bits, 8 command bits
    // n = 22, if mesuring from first start bit
    int n = 22;
 800126e:	2316      	movs	r3, #22
 8001270:	65bb      	str	r3, [r7, #88]	; 0x58
    int bit[22] = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2258      	movs	r2, #88	; 0x58
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f007 f9bf 	bl	80085fc <memset>

    // read signal and wait 1 period
    for (int i = 0; i < n; i++) {
 800127e:	2300      	movs	r3, #0
 8001280:	663b      	str	r3, [r7, #96]	; 0x60
 8001282:	e013      	b.n	80012ac <decodeIRSignal+0x50>
    	bit[i] = HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN);
 8001284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001288:	481a      	ldr	r0, [pc, #104]	; (80012f4 <decodeIRSignal+0x98>)
 800128a:	f001 ff6b 	bl	8003164 <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	3368      	adds	r3, #104	; 0x68
 8001298:	443b      	add	r3, r7
 800129a:	f843 2c68 	str.w	r2, [r3, #-104]
    	delay_x(880);
 800129e:	f44f 705c 	mov.w	r0, #880	; 0x370
 80012a2:	f000 f829 	bl	80012f8 <delay_x>
    for (int i = 0; i < n; i++) {
 80012a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012a8:	3301      	adds	r3, #1
 80012aa:	663b      	str	r3, [r7, #96]	; 0x60
 80012ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbe7      	blt.n	8001284 <decodeIRSignal+0x28>
	}

    // TSOP signal is inverted, so this for loop turs on bits that are low (logical 0)
    for (int i = 0; i < n; i++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012b8:	e012      	b.n	80012e0 <decodeIRSignal+0x84>
    	if (bit[i] == 0) {
 80012ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	3368      	adds	r3, #104	; 0x68
 80012c0:	443b      	add	r3, r7
 80012c2:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d107      	bne.n	80012da <decodeIRSignal+0x7e>
    		signal |= (1 << i);
 80012ca:	2201      	movs	r2, #1
 80012cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	461a      	mov	r2, r3
 80012d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012d6:	4313      	orrs	r3, r2
 80012d8:	667b      	str	r3, [r7, #100]	; 0x64
    for (int i = 0; i < n; i++) {
 80012da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012dc:	3301      	adds	r3, #1
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbe8      	blt.n	80012ba <decodeIRSignal+0x5e>
    if (bit7 == 1) {
    	signal |= (1 << (31 - 7));
    }
*/

    return signal;
 80012e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3768      	adds	r7, #104	; 0x68
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	58021c00 	.word	0x58021c00

080012f8 <delay_x>:

void delay_x (uint16_t x)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <delay_x+0x30>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < x);
 800130a:	bf00      	nop
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <delay_x+0x30>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3f9      	bcc.n	800130c <delay_x+0x14>
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	240000f4 	.word	0x240000f4

0800132c <sendMessage>:

void sendMessage(uint32_t message) {
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	// clear buffer
	memset(SendBuffer, 0, sizeof(SendBuffer));
 8001334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001338:	2100      	movs	r1, #0
 800133a:	486a      	ldr	r0, [pc, #424]	; (80014e4 <sendMessage+0x1b8>)
 800133c:	f007 f95e 	bl	80085fc <memset>

	strncat(SendBuffer, "Message -> start bits: ", 23);
 8001340:	4868      	ldr	r0, [pc, #416]	; (80014e4 <sendMessage+0x1b8>)
 8001342:	f7fe ffc9 	bl	80002d8 <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <sendMessage+0x1b8>)
 800134c:	4413      	add	r3, r2
 800134e:	4a66      	ldr	r2, [pc, #408]	; (80014e8 <sendMessage+0x1bc>)
 8001350:	461d      	mov	r5, r3
 8001352:	4614      	mov	r4, r2
 8001354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001356:	6028      	str	r0, [r5, #0]
 8001358:	6069      	str	r1, [r5, #4]
 800135a:	60aa      	str	r2, [r5, #8]
 800135c:	60eb      	str	r3, [r5, #12]
 800135e:	cc03      	ldmia	r4!, {r0, r1}
 8001360:	6128      	str	r0, [r5, #16]
 8001362:	6169      	str	r1, [r5, #20]
    for (int i = 0; i < 4; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	e016      	b.n	8001398 <sendMessage+0x6c>
        char bit = (message & (1 << i)) ? '1' : '0';
 800136a:	2201      	movs	r2, #1
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	461a      	mov	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <sendMessage+0x54>
 800137c:	2331      	movs	r3, #49	; 0x31
 800137e:	e000      	b.n	8001382 <sendMessage+0x56>
 8001380:	2330      	movs	r3, #48	; 0x30
 8001382:	73fb      	strb	r3, [r7, #15]
        strncat(SendBuffer, &bit, 1);
 8001384:	f107 030f 	add.w	r3, r7, #15
 8001388:	2201      	movs	r2, #1
 800138a:	4619      	mov	r1, r3
 800138c:	4855      	ldr	r0, [pc, #340]	; (80014e4 <sendMessage+0x1b8>)
 800138e:	f007 f93d 	bl	800860c <strncat>
    for (int i = 0; i < 4; i++) {
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b03      	cmp	r3, #3
 800139c:	dde5      	ble.n	800136a <sendMessage+0x3e>
    }

    strncat(SendBuffer, " toggle: ", 9);
 800139e:	4851      	ldr	r0, [pc, #324]	; (80014e4 <sendMessage+0x1b8>)
 80013a0:	f7fe ff9a 	bl	80002d8 <strlen>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <sendMessage+0x1b8>)
 80013aa:	4413      	add	r3, r2
 80013ac:	494f      	ldr	r1, [pc, #316]	; (80014ec <sendMessage+0x1c0>)
 80013ae:	461a      	mov	r2, r3
 80013b0:	460b      	mov	r3, r1
 80013b2:	cb03      	ldmia	r3!, {r0, r1}
 80013b4:	6010      	str	r0, [r2, #0]
 80013b6:	6051      	str	r1, [r2, #4]
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	8113      	strh	r3, [r2, #8]
    for (int i = 4; i < 6; i++) {
 80013bc:	2304      	movs	r3, #4
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	e016      	b.n	80013f0 <sendMessage+0xc4>
        char bit = (message & (1 << i)) ? '1' : '0';
 80013c2:	2201      	movs	r2, #1
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <sendMessage+0xac>
 80013d4:	2331      	movs	r3, #49	; 0x31
 80013d6:	e000      	b.n	80013da <sendMessage+0xae>
 80013d8:	2330      	movs	r3, #48	; 0x30
 80013da:	73bb      	strb	r3, [r7, #14]
        strncat(SendBuffer, &bit, 1);
 80013dc:	f107 030e 	add.w	r3, r7, #14
 80013e0:	2201      	movs	r2, #1
 80013e2:	4619      	mov	r1, r3
 80013e4:	483f      	ldr	r0, [pc, #252]	; (80014e4 <sendMessage+0x1b8>)
 80013e6:	f007 f911 	bl	800860c <strncat>
    for (int i = 4; i < 6; i++) {
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	dde5      	ble.n	80013c2 <sendMessage+0x96>
    }

    strncat(SendBuffer, " address: ", 10);
 80013f6:	483b      	ldr	r0, [pc, #236]	; (80014e4 <sendMessage+0x1b8>)
 80013f8:	f7fe ff6e 	bl	80002d8 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <sendMessage+0x1b8>)
 8001402:	4413      	add	r3, r2
 8001404:	493a      	ldr	r1, [pc, #232]	; (80014f0 <sendMessage+0x1c4>)
 8001406:	461a      	mov	r2, r3
 8001408:	460b      	mov	r3, r1
 800140a:	cb03      	ldmia	r3!, {r0, r1}
 800140c:	6010      	str	r0, [r2, #0]
 800140e:	6051      	str	r1, [r2, #4]
 8001410:	8819      	ldrh	r1, [r3, #0]
 8001412:	789b      	ldrb	r3, [r3, #2]
 8001414:	8111      	strh	r1, [r2, #8]
 8001416:	7293      	strb	r3, [r2, #10]
    for (int i = 6; i < 14; i++) {
 8001418:	2306      	movs	r3, #6
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e016      	b.n	800144c <sendMessage+0x120>
        char bit = (message & (1 << i)) ? '1' : '0';
 800141e:	2201      	movs	r2, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <sendMessage+0x108>
 8001430:	2331      	movs	r3, #49	; 0x31
 8001432:	e000      	b.n	8001436 <sendMessage+0x10a>
 8001434:	2330      	movs	r3, #48	; 0x30
 8001436:	737b      	strb	r3, [r7, #13]
        strncat(SendBuffer, &bit, 1);
 8001438:	f107 030d 	add.w	r3, r7, #13
 800143c:	2201      	movs	r2, #1
 800143e:	4619      	mov	r1, r3
 8001440:	4828      	ldr	r0, [pc, #160]	; (80014e4 <sendMessage+0x1b8>)
 8001442:	f007 f8e3 	bl	800860c <strncat>
    for (int i = 6; i < 14; i++) {
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b0d      	cmp	r3, #13
 8001450:	dde5      	ble.n	800141e <sendMessage+0xf2>
    }

    strncat(SendBuffer, " command: ", 10);
 8001452:	4824      	ldr	r0, [pc, #144]	; (80014e4 <sendMessage+0x1b8>)
 8001454:	f7fe ff40 	bl	80002d8 <strlen>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <sendMessage+0x1b8>)
 800145e:	4413      	add	r3, r2
 8001460:	4924      	ldr	r1, [pc, #144]	; (80014f4 <sendMessage+0x1c8>)
 8001462:	461a      	mov	r2, r3
 8001464:	460b      	mov	r3, r1
 8001466:	cb03      	ldmia	r3!, {r0, r1}
 8001468:	6010      	str	r0, [r2, #0]
 800146a:	6051      	str	r1, [r2, #4]
 800146c:	8819      	ldrh	r1, [r3, #0]
 800146e:	789b      	ldrb	r3, [r3, #2]
 8001470:	8111      	strh	r1, [r2, #8]
 8001472:	7293      	strb	r3, [r2, #10]
    for (int i = 14; i < 22; i++) {
 8001474:	230e      	movs	r3, #14
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	e016      	b.n	80014a8 <sendMessage+0x17c>
        char bit = (message & (1 << i)) ? '1' : '0';
 800147a:	2201      	movs	r2, #1
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	461a      	mov	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <sendMessage+0x164>
 800148c:	2331      	movs	r3, #49	; 0x31
 800148e:	e000      	b.n	8001492 <sendMessage+0x166>
 8001490:	2330      	movs	r3, #48	; 0x30
 8001492:	733b      	strb	r3, [r7, #12]
        strncat(SendBuffer, &bit, 1);
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2201      	movs	r2, #1
 800149a:	4619      	mov	r1, r3
 800149c:	4811      	ldr	r0, [pc, #68]	; (80014e4 <sendMessage+0x1b8>)
 800149e:	f007 f8b5 	bl	800860c <strncat>
    for (int i = 14; i < 22; i++) {
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	3301      	adds	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	2b15      	cmp	r3, #21
 80014ac:	dde5      	ble.n	800147a <sendMessage+0x14e>
    }
    strncat(SendBuffer, "\r\n", 2);
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <sendMessage+0x1b8>)
 80014b0:	f7fe ff12 	bl	80002d8 <strlen>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <sendMessage+0x1b8>)
 80014ba:	4413      	add	r3, r2
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <sendMessage+0x1cc>)
 80014be:	8811      	ldrh	r1, [r2, #0]
 80014c0:	7892      	ldrb	r2, [r2, #2]
 80014c2:	8019      	strh	r1, [r3, #0]
 80014c4:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart3, (uint8_t *)SendBuffer, strlen(SendBuffer), HAL_MAX_DELAY);
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <sendMessage+0x1b8>)
 80014c8:	f7fe ff06 	bl	80002d8 <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	4903      	ldr	r1, [pc, #12]	; (80014e4 <sendMessage+0x1b8>)
 80014d6:	4809      	ldr	r0, [pc, #36]	; (80014fc <sendMessage+0x1d0>)
 80014d8:	f005 ff76 	bl	80073c8 <HAL_UART_Transmit>
}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	240001d4 	.word	0x240001d4
 80014e8:	08008694 	.word	0x08008694
 80014ec:	080086ac 	.word	0x080086ac
 80014f0:	080086b8 	.word	0x080086b8
 80014f4:	080086c4 	.word	0x080086c4
 80014f8:	080086d0 	.word	0x080086d0
 80014fc:	24000140 	.word	0x24000140

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_MspInit+0x30>)
 8001514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001518:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_MspInit+0x30>)
 800151a:	f043 0302 	orr.w	r3, r3, #2
 800151e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_MspInit+0x30>)
 8001524:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	58024400 	.word	0x58024400

08001540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08e      	sub	sp, #56	; 0x38
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a57      	ldr	r2, [pc, #348]	; (80016bc <HAL_ADC_MspInit+0x17c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d151      	bne.n	8001606 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001562:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001564:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001568:	4a55      	ldr	r2, [pc, #340]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001572:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001574:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	623b      	str	r3, [r7, #32]
 800157e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001580:	4b4f      	ldr	r3, [pc, #316]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001586:	4a4e      	ldr	r2, [pc, #312]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001590:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015bc:	2301      	movs	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c0:	2303      	movs	r3, #3
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	483d      	ldr	r0, [pc, #244]	; (80016c4 <HAL_ADC_MspInit+0x184>)
 80015d0:	f001 fc18 	bl	8002e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015d4:	2310      	movs	r3, #16
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d8:	2303      	movs	r3, #3
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	4838      	ldr	r0, [pc, #224]	; (80016c8 <HAL_ADC_MspInit+0x188>)
 80015e8:	f001 fc0c 	bl	8002e04 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80015ec:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80015f0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80015f4:	f000 fa72 	bl	8001adc <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80015f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015fc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001600:	f000 fa6c 	bl	8001adc <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001604:	e056      	b.n	80016b4 <HAL_ADC_MspInit+0x174>
  else if(hadc->Instance==ADC3)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a30      	ldr	r2, [pc, #192]	; (80016cc <HAL_ADC_MspInit+0x18c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d151      	bne.n	80016b4 <HAL_ADC_MspInit+0x174>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001616:	4a2a      	ldr	r2, [pc, #168]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800161c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001636:	f043 0320 	orr.w	r3, r3, #32
 800163a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 800164e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001652:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_ADC_MspInit+0x180>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800166a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001670:	2303      	movs	r3, #3
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4814      	ldr	r0, [pc, #80]	; (80016d0 <HAL_ADC_MspInit+0x190>)
 8001680:	f001 fbc0 	bl	8002e04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001684:	2301      	movs	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001688:	2303      	movs	r3, #3
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <HAL_ADC_MspInit+0x184>)
 8001698:	f001 fbb4 	bl	8002e04 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800169c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80016a0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80016a4:	f000 fa1a 	bl	8001adc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80016a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80016ac:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80016b0:	f000 fa14 	bl	8001adc <HAL_SYSCFG_AnalogSwitchConfig>
}
 80016b4:	bf00      	nop
 80016b6:	3738      	adds	r7, #56	; 0x38
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40022000 	.word	0x40022000
 80016c0:	58024400 	.word	0x58024400
 80016c4:	58020800 	.word	0x58020800
 80016c8:	58020000 	.word	0x58020000
 80016cc:	58026000 	.word	0x58026000
 80016d0:	58021400 	.word	0x58021400

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e4:	d10e      	bne.n	8001704 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_TIM_Base_MspInit+0x3c>)
 80016e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_TIM_Base_MspInit+0x3c>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_TIM_Base_MspInit+0x3c>)
 80016f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	58024400 	.word	0x58024400

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0ba      	sub	sp, #232	; 0xe8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	22c0      	movs	r2, #192	; 0xc0
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f006 ff61 	bl	80085fc <memset>
  if(huart->Instance==USART3)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a27      	ldr	r2, [pc, #156]	; (80017dc <HAL_UART_MspInit+0xc8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d146      	bne.n	80017d2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001744:	f04f 0202 	mov.w	r2, #2
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fd54 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001766:	f7ff fecb 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_UART_MspInit+0xcc>)
 800176c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001770:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <HAL_UART_MspInit+0xcc>)
 8001772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001776:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_UART_MspInit+0xcc>)
 800177c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0xcc>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_UART_MspInit+0xcc>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_UART_MspInit+0xcc>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80017a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c0:	2307      	movs	r3, #7
 80017c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <HAL_UART_MspInit+0xd0>)
 80017ce:	f001 fb19 	bl	8002e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	37e8      	adds	r7, #232	; 0xe8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40004800 	.word	0x40004800
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58020400 	.word	0x58020400

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f926 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001840:	4b37      	ldr	r3, [pc, #220]	; (8001920 <SystemInit+0xe4>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a36      	ldr	r2, [pc, #216]	; (8001920 <SystemInit+0xe4>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001850:	4b34      	ldr	r3, [pc, #208]	; (8001924 <SystemInit+0xe8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	2b06      	cmp	r3, #6
 800185a:	d807      	bhi.n	800186c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800185c:	4b31      	ldr	r3, [pc, #196]	; (8001924 <SystemInit+0xe8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 030f 	bic.w	r3, r3, #15
 8001864:	4a2f      	ldr	r2, [pc, #188]	; (8001924 <SystemInit+0xe8>)
 8001866:	f043 0307 	orr.w	r3, r3, #7
 800186a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <SystemInit+0xec>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <SystemInit+0xec>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <SystemInit+0xec>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <SystemInit+0xec>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4929      	ldr	r1, [pc, #164]	; (8001928 <SystemInit+0xec>)
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <SystemInit+0xf0>)
 8001886:	4013      	ands	r3, r2
 8001888:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <SystemInit+0xe8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <SystemInit+0xe8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 030f 	bic.w	r3, r3, #15
 800189e:	4a21      	ldr	r2, [pc, #132]	; (8001924 <SystemInit+0xe8>)
 80018a0:	f043 0307 	orr.w	r3, r3, #7
 80018a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <SystemInit+0xec>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <SystemInit+0xec>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <SystemInit+0xec>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <SystemInit+0xec>)
 80018ba:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <SystemInit+0xf4>)
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <SystemInit+0xec>)
 80018c0:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <SystemInit+0xf8>)
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018c4:	4b18      	ldr	r3, [pc, #96]	; (8001928 <SystemInit+0xec>)
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <SystemInit+0xfc>)
 80018c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <SystemInit+0xec>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <SystemInit+0xec>)
 80018d2:	4a19      	ldr	r2, [pc, #100]	; (8001938 <SystemInit+0xfc>)
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <SystemInit+0xec>)
 80018d8:	2200      	movs	r2, #0
 80018da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <SystemInit+0xec>)
 80018de:	4a16      	ldr	r2, [pc, #88]	; (8001938 <SystemInit+0xfc>)
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <SystemInit+0xec>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <SystemInit+0xec>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <SystemInit+0xec>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <SystemInit+0xec>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <SystemInit+0x100>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <SystemInit+0x104>)
 8001900:	4013      	ands	r3, r2
 8001902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001906:	d202      	bcs.n	800190e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <SystemInit+0x108>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <SystemInit+0x10c>)
 8001910:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001914:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
 }
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	52002000 	.word	0x52002000
 8001928:	58024400 	.word	0x58024400
 800192c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001930:	02020200 	.word	0x02020200
 8001934:	01ff0000 	.word	0x01ff0000
 8001938:	01010280 	.word	0x01010280
 800193c:	5c001000 	.word	0x5c001000
 8001940:	ffff0000 	.word	0xffff0000
 8001944:	51008108 	.word	0x51008108
 8001948:	52004000 	.word	0x52004000

0800194c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001984 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001950:	f7ff ff74 	bl	800183c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001956:	490d      	ldr	r1, [pc, #52]	; (800198c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800196c:	4c0a      	ldr	r4, [pc, #40]	; (8001998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197a:	f006 fe5b 	bl	8008634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197e:	f7fe fe31 	bl	80005e4 <main>
  bx  lr
 8001982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001984:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001988:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800198c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001990:	08008740 	.word	0x08008740
  ldr r2, =_sbss
 8001994:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001998:	240002d8 	.word	0x240002d8

0800199c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC3_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a6:	2003      	movs	r0, #3
 80019a8:	f001 f9fa 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019ac:	f002 fa56 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_Init+0x68>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	4913      	ldr	r1, [pc, #76]	; (8001a0c <HAL_Init+0x6c>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_Init+0x68>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <HAL_Init+0x6c>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_Init+0x70>)
 80019e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_Init+0x74>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 f814 	bl	8001a18 <HAL_InitTick>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e002      	b.n	8001a00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019fa:	f7ff fd87 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58024400 	.word	0x58024400
 8001a0c:	080086f8 	.word	0x080086f8
 8001a10:	24000004 	.word	0x24000004
 8001a14:	24000000 	.word	0x24000000

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_InitTick+0x60>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e021      	b.n	8001a70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_InitTick+0x64>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_InitTick+0x60>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 f9d1 	bl	8002dea <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f001 f9a9 	bl	8002db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_InitTick+0x68>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2400000c 	.word	0x2400000c
 8001a7c:	24000000 	.word	0x24000000
 8001a80:	24000008 	.word	0x24000008

08001a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	2400000c 	.word	0x2400000c
 8001aa8:	240002d4 	.word	0x240002d4

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	240002d4 	.word	0x240002d4

08001ac4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_GetREVID+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0c1b      	lsrs	r3, r3, #16
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	5c001000 	.word	0x5c001000

08001adc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	401a      	ands	r2, r3
 8001af0:	4904      	ldr	r1, [pc, #16]	; (8001b04 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	58000400 	.word	0x58000400

08001b08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	609a      	str	r2, [r3, #8]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3360      	adds	r3, #96	; 0x60
 8001b82:	461a      	mov	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b087      	sub	sp, #28
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3360      	adds	r3, #96	; 0x60
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	601a      	str	r2, [r3, #0]
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3330      	adds	r3, #48	; 0x30
 8001c28:	461a      	mov	r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	4413      	add	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	211f      	movs	r1, #31
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	f003 011f 	and.w	r1, r3, #31
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3314      	adds	r3, #20
 8001c80:	461a      	mov	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0e5b      	lsrs	r3, r3, #25
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	0d1b      	lsrs	r3, r3, #20
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2107      	movs	r1, #7
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	0d1b      	lsrs	r3, r3, #20
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0318 	and.w	r3, r3, #24
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	400b      	ands	r3, r1
 8001cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	000fffff 	.word	0x000fffff

08001d10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6093      	str	r3, [r2, #8]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	5fffffc0 	.word	0x5fffffc0

08001d34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d48:	d101      	bne.n	8001d4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	6fffffc0 	.word	0x6fffffc0

08001d84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <LL_ADC_IsEnabled+0x18>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <LL_ADC_IsEnabled+0x1a>
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d101      	bne.n	8001dea <LL_ADC_REG_IsConversionOngoing+0x18>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d101      	bne.n	8001e10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e18f      	b.n	800215a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff fb79 	bl	8001540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff67 	bl	8001d34 <LL_ADC_IsDeepPowerDownEnabled>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d004      	beq.n	8001e76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff4d 	bl	8001d10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff82 	bl	8001d84 <LL_ADC_IsInternalRegulatorEnabled>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d114      	bne.n	8001eb0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff66 	bl	8001d5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e90:	4b87      	ldr	r3, [pc, #540]	; (80020b0 <HAL_ADC_Init+0x290>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	4a87      	ldr	r2, [pc, #540]	; (80020b4 <HAL_ADC_Init+0x294>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ea2:	e002      	b.n	8001eaa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f9      	bne.n	8001ea4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff65 	bl	8001d84 <LL_ADC_IsInternalRegulatorEnabled>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10d      	bne.n	8001edc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	f043 0210 	orr.w	r2, r3, #16
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff76 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 8001ee6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 8129 	bne.w	8002148 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f040 8125 	bne.w	8002148 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f02:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f06:	f043 0202 	orr.w	r2, r3, #2
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff4a 	bl	8001dac <LL_ADC_IsEnabled>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d136      	bne.n	8001f8c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_ADC_Init+0x298>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d004      	beq.n	8001f32 <HAL_ADC_Init+0x112>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a63      	ldr	r2, [pc, #396]	; (80020bc <HAL_ADC_Init+0x29c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10e      	bne.n	8001f50 <HAL_ADC_Init+0x130>
 8001f32:	4861      	ldr	r0, [pc, #388]	; (80020b8 <HAL_ADC_Init+0x298>)
 8001f34:	f7ff ff3a 	bl	8001dac <LL_ADC_IsEnabled>
 8001f38:	4604      	mov	r4, r0
 8001f3a:	4860      	ldr	r0, [pc, #384]	; (80020bc <HAL_ADC_Init+0x29c>)
 8001f3c:	f7ff ff36 	bl	8001dac <LL_ADC_IsEnabled>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4323      	orrs	r3, r4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e008      	b.n	8001f62 <HAL_ADC_Init+0x142>
 8001f50:	485b      	ldr	r0, [pc, #364]	; (80020c0 <HAL_ADC_Init+0x2a0>)
 8001f52:	f7ff ff2b 	bl	8001dac <LL_ADC_IsEnabled>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d012      	beq.n	8001f8c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <HAL_ADC_Init+0x298>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d004      	beq.n	8001f7a <HAL_ADC_Init+0x15a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a51      	ldr	r2, [pc, #324]	; (80020bc <HAL_ADC_Init+0x29c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_Init+0x15e>
 8001f7a:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_ADC_Init+0x2a4>)
 8001f7c:	e000      	b.n	8001f80 <HAL_ADC_Init+0x160>
 8001f7e:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_ADC_Init+0x2a8>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f7ff fdbe 	bl	8001b08 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001f8c:	f7ff fd9a 	bl	8001ac4 <HAL_GetREVID>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d914      	bls.n	8001fc4 <HAL_ADC_Init+0x1a4>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d110      	bne.n	8001fc4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7d5b      	ldrb	r3, [r3, #21]
 8001fa6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fb2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7f1b      	ldrb	r3, [r3, #28]
 8001fb8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fbc:	f043 030c 	orr.w	r3, r3, #12
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	e00d      	b.n	8001fe0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7d5b      	ldrb	r3, [r3, #21]
 8001fc8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fd4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7f1b      	ldrb	r3, [r3, #28]
 8001fda:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7f1b      	ldrb	r3, [r3, #28]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d106      	bne.n	8001ff6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	045b      	lsls	r3, r3, #17
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <HAL_ADC_Init+0x2ac>)
 800201a:	4013      	ands	r3, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	69b9      	ldr	r1, [r7, #24]
 8002022:	430b      	orrs	r3, r1
 8002024:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fed1 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 8002030:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fede 	bl	8001df8 <LL_ADC_INJ_IsConversionOngoing>
 800203c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d15f      	bne.n	8002104 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d15c      	bne.n	8002104 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7d1b      	ldrb	r3, [r3, #20]
 800204e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_ADC_Init+0x2b0>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	69b9      	ldr	r1, [r7, #24]
 8002068:	430b      	orrs	r3, r1
 800206a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002072:	2b01      	cmp	r3, #1
 8002074:	d130      	bne.n	80020d8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8002084:	4013      	ands	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800208a:	3a01      	subs	r2, #1
 800208c:	0411      	lsls	r1, r2, #16
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002092:	4311      	orrs	r1, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002098:	4311      	orrs	r1, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800209e:	430a      	orrs	r2, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	e01c      	b.n	80020e8 <HAL_ADC_Init+0x2c8>
 80020ae:	bf00      	nop
 80020b0:	24000000 	.word	0x24000000
 80020b4:	053e2d63 	.word	0x053e2d63
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40022100 	.word	0x40022100
 80020c0:	58026000 	.word	0x58026000
 80020c4:	40022300 	.word	0x40022300
 80020c8:	58026300 	.word	0x58026300
 80020cc:	fff0c003 	.word	0xfff0c003
 80020d0:	ffffbffc 	.word	0xffffbffc
 80020d4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fb8c 	bl	800281c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d10c      	bne.n	8002126 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f023 010f 	bic.w	r1, r3, #15
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
 8002124:	e007      	b.n	8002136 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 020f 	bic.w	r2, r2, #15
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
 8002146:	e007      	b.n	8002158 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	f043 0210 	orr.w	r2, r3, #16
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002158:	7ffb      	ldrb	r3, [r7, #31]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd90      	pop	{r4, r7, pc}
 8002162:	bf00      	nop

08002164 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b0a1      	sub	sp, #132	; 0x84
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a65      	ldr	r2, [pc, #404]	; (8002314 <HAL_ADC_ConfigChannel+0x1b0>)
 800217e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_ADC_ConfigChannel+0x2a>
 800218a:	2302      	movs	r3, #2
 800218c:	e32e      	b.n	80027ec <HAL_ADC_ConfigChannel+0x688>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fe19 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 8313 	bne.w	80027ce <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db2c      	blt.n	800220a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d108      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x6a>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0e9b      	lsrs	r3, r3, #26
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2201      	movs	r2, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	e016      	b.n	80021fc <HAL_ADC_ConfigChannel+0x98>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80021e6:	2320      	movs	r3, #32
 80021e8:	e003      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80021ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2201      	movs	r2, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	69d1      	ldr	r1, [r2, #28]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	430b      	orrs	r3, r1
 8002208:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	f7ff fcfe 	bl	8001c18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fdd6 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 8002226:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fde3 	bl	8001df8 <LL_ADC_INJ_IsConversionOngoing>
 8002232:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 80b8 	bne.w	80023ac <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800223c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 80b4 	bne.w	80023ac <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	461a      	mov	r2, r3
 8002252:	f7ff fd0d 	bl	8001c70 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002256:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_ADC_ConfigChannel+0x1b4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800225e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002262:	d10b      	bne.n	800227c <HAL_ADC_ConfigChannel+0x118>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	e01d      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x154>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10b      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x13e>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	e00a      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x154>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d02c      	beq.n	800231c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6919      	ldr	r1, [r3, #16]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022d0:	f7ff fc4e 	bl	8001b70 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6919      	ldr	r1, [r3, #16]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	7e5b      	ldrb	r3, [r3, #25]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d102      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x186>
 80022e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80022e8:	e000      	b.n	80022ec <HAL_ADC_ConfigChannel+0x188>
 80022ea:	2300      	movs	r3, #0
 80022ec:	461a      	mov	r2, r3
 80022ee:	f7ff fc78 	bl	8001be2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6919      	ldr	r1, [r3, #16]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	7e1b      	ldrb	r3, [r3, #24]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d102      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x1a4>
 8002302:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002306:	e000      	b.n	800230a <HAL_ADC_ConfigChannel+0x1a6>
 8002308:	2300      	movs	r3, #0
 800230a:	461a      	mov	r2, r3
 800230c:	f7ff fc50 	bl	8001bb0 <LL_ADC_SetDataRightShift>
 8002310:	e04c      	b.n	80023ac <HAL_ADC_ConfigChannel+0x248>
 8002312:	bf00      	nop
 8002314:	47ff0000 	.word	0x47ff0000
 8002318:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	069b      	lsls	r3, r3, #26
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800233e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	069b      	lsls	r3, r3, #26
 8002350:	429a      	cmp	r2, r3
 8002352:	d107      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002362:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002386:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800238e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	069b      	lsls	r3, r3, #26
 8002398:	429a      	cmp	r2, r3
 800239a:	d107      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fcfb 	bl	8001dac <LL_ADC_IsEnabled>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 8211 	bne.w	80027e0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f7ff fc7c 	bl	8001cc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4aa1      	ldr	r2, [pc, #644]	; (800265c <HAL_ADC_ConfigChannel+0x4f8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	f040 812e 	bne.w	8002638 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x2a0>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0e9b      	lsrs	r3, r3, #26
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	2b09      	cmp	r3, #9
 80023fa:	bf94      	ite	ls
 80023fc:	2301      	movls	r3, #1
 80023fe:	2300      	movhi	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e019      	b.n	8002438 <HAL_ADC_ConfigChannel+0x2d4>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002414:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800241c:	2320      	movs	r3, #32
 800241e:	e003      	b.n	8002428 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2b09      	cmp	r3, #9
 8002430:	bf94      	ite	ls
 8002432:	2301      	movls	r3, #1
 8002434:	2300      	movhi	r3, #0
 8002436:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002438:	2b00      	cmp	r3, #0
 800243a:	d079      	beq.n	8002530 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x2f4>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	3301      	adds	r3, #1
 8002450:	069b      	lsls	r3, r3, #26
 8002452:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002456:	e015      	b.n	8002484 <HAL_ADC_ConfigChannel+0x320>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002468:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800246a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002470:	2320      	movs	r3, #32
 8002472:	e003      	b.n	800247c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3301      	adds	r3, #1
 800247e:	069b      	lsls	r3, r3, #26
 8002480:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x340>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	3301      	adds	r3, #1
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	e017      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x370>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80024bc:	2320      	movs	r3, #32
 80024be:	e003      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80024c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	3301      	adds	r3, #1
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	ea42 0103 	orr.w	r1, r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x396>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	051b      	lsls	r3, r3, #20
 80024f8:	e018      	b.n	800252c <HAL_ADC_ConfigChannel+0x3c8>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e003      	b.n	800251e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800252c:	430b      	orrs	r3, r1
 800252e:	e07e      	b.n	800262e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_ADC_ConfigChannel+0x3e8>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	069b      	lsls	r3, r3, #26
 8002546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800254a:	e015      	b.n	8002578 <HAL_ADC_ConfigChannel+0x414>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002564:	2320      	movs	r3, #32
 8002566:	e003      	b.n	8002570 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	069b      	lsls	r3, r3, #26
 8002574:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x434>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	3301      	adds	r3, #1
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	e017      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x464>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	61bb      	str	r3, [r7, #24]
  return result;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e003      	b.n	80025bc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	ea42 0103 	orr.w	r1, r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x490>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	3301      	adds	r3, #1
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	3b1e      	subs	r3, #30
 80025ec:	051b      	lsls	r3, r3, #20
 80025ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025f2:	e01b      	b.n	800262c <HAL_ADC_ConfigChannel+0x4c8>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	60fb      	str	r3, [r7, #12]
  return result;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800260c:	2320      	movs	r3, #32
 800260e:	e003      	b.n	8002618 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3301      	adds	r3, #1
 800261a:	f003 021f 	and.w	r2, r3, #31
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	3b1e      	subs	r3, #30
 8002626:	051b      	lsls	r3, r3, #20
 8002628:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262c:	430b      	orrs	r3, r1
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	6892      	ldr	r2, [r2, #8]
 8002632:	4619      	mov	r1, r3
 8002634:	f7ff fb1c 	bl	8001c70 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f280 80cf 	bge.w	80027e0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a06      	ldr	r2, [pc, #24]	; (8002660 <HAL_ADC_ConfigChannel+0x4fc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d004      	beq.n	8002656 <HAL_ADC_ConfigChannel+0x4f2>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_ADC_ConfigChannel+0x500>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x508>
 8002656:	4b04      	ldr	r3, [pc, #16]	; (8002668 <HAL_ADC_ConfigChannel+0x504>)
 8002658:	e009      	b.n	800266e <HAL_ADC_ConfigChannel+0x50a>
 800265a:	bf00      	nop
 800265c:	47ff0000 	.word	0x47ff0000
 8002660:	40022000 	.word	0x40022000
 8002664:	40022100 	.word	0x40022100
 8002668:	40022300 	.word	0x40022300
 800266c:	4b61      	ldr	r3, [pc, #388]	; (80027f4 <HAL_ADC_ConfigChannel+0x690>)
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fa70 	bl	8001b54 <LL_ADC_GetCommonPathInternalCh>
 8002674:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a5f      	ldr	r2, [pc, #380]	; (80027f8 <HAL_ADC_ConfigChannel+0x694>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_ADC_ConfigChannel+0x526>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a5d      	ldr	r2, [pc, #372]	; (80027fc <HAL_ADC_ConfigChannel+0x698>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10e      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x544>
 800268a:	485b      	ldr	r0, [pc, #364]	; (80027f8 <HAL_ADC_ConfigChannel+0x694>)
 800268c:	f7ff fb8e 	bl	8001dac <LL_ADC_IsEnabled>
 8002690:	4604      	mov	r4, r0
 8002692:	485a      	ldr	r0, [pc, #360]	; (80027fc <HAL_ADC_ConfigChannel+0x698>)
 8002694:	f7ff fb8a 	bl	8001dac <LL_ADC_IsEnabled>
 8002698:	4603      	mov	r3, r0
 800269a:	4323      	orrs	r3, r4
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e008      	b.n	80026ba <HAL_ADC_ConfigChannel+0x556>
 80026a8:	4855      	ldr	r0, [pc, #340]	; (8002800 <HAL_ADC_ConfigChannel+0x69c>)
 80026aa:	f7ff fb7f 	bl	8001dac <LL_ADC_IsEnabled>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d07d      	beq.n	80027ba <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a50      	ldr	r2, [pc, #320]	; (8002804 <HAL_ADC_ConfigChannel+0x6a0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d130      	bne.n	800272a <HAL_ADC_ConfigChannel+0x5c6>
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d12b      	bne.n	800272a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_ADC_ConfigChannel+0x69c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	f040 8081 	bne.w	80027e0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a45      	ldr	r2, [pc, #276]	; (80027f8 <HAL_ADC_ConfigChannel+0x694>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d004      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x58e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a43      	ldr	r2, [pc, #268]	; (80027fc <HAL_ADC_ConfigChannel+0x698>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x592>
 80026f2:	4a45      	ldr	r2, [pc, #276]	; (8002808 <HAL_ADC_ConfigChannel+0x6a4>)
 80026f4:	e000      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x594>
 80026f6:	4a3f      	ldr	r2, [pc, #252]	; (80027f4 <HAL_ADC_ConfigChannel+0x690>)
 80026f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f7ff fa14 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_ADC_ConfigChannel+0x6a8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	099b      	lsrs	r3, r3, #6
 800270c:	4a40      	ldr	r2, [pc, #256]	; (8002810 <HAL_ADC_ConfigChannel+0x6ac>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	3301      	adds	r3, #1
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800271a:	e002      	b.n	8002722 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3b01      	subs	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f9      	bne.n	800271c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002728:	e05a      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a39      	ldr	r2, [pc, #228]	; (8002814 <HAL_ADC_ConfigChannel+0x6b0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d11e      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x60e>
 8002734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d119      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2f      	ldr	r2, [pc, #188]	; (8002800 <HAL_ADC_ConfigChannel+0x69c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d14b      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <HAL_ADC_ConfigChannel+0x694>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_ADC_ConfigChannel+0x5f8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a29      	ldr	r2, [pc, #164]	; (80027fc <HAL_ADC_ConfigChannel+0x698>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x5fc>
 800275c:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <HAL_ADC_ConfigChannel+0x6a4>)
 800275e:	e000      	b.n	8002762 <HAL_ADC_ConfigChannel+0x5fe>
 8002760:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <HAL_ADC_ConfigChannel+0x690>)
 8002762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f7ff f9df 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002770:	e036      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a28      	ldr	r2, [pc, #160]	; (8002818 <HAL_ADC_ConfigChannel+0x6b4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d131      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x67c>
 800277c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d12c      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <HAL_ADC_ConfigChannel+0x69c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d127      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_ADC_ConfigChannel+0x694>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_ADC_ConfigChannel+0x640>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <HAL_ADC_ConfigChannel+0x698>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x644>
 80027a4:	4a18      	ldr	r2, [pc, #96]	; (8002808 <HAL_ADC_ConfigChannel+0x6a4>)
 80027a6:	e000      	b.n	80027aa <HAL_ADC_ConfigChannel+0x646>
 80027a8:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <HAL_ADC_ConfigChannel+0x690>)
 80027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f7ff f9bb 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
 80027b8:	e012      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f043 0220 	orr.w	r2, r3, #32
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80027cc:	e008      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3784      	adds	r7, #132	; 0x84
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}
 80027f4:	58026300 	.word	0x58026300
 80027f8:	40022000 	.word	0x40022000
 80027fc:	40022100 	.word	0x40022100
 8002800:	58026000 	.word	0x58026000
 8002804:	cb840000 	.word	0xcb840000
 8002808:	40022300 	.word	0x40022300
 800280c:	24000000 	.word	0x24000000
 8002810:	053e2d63 	.word	0x053e2d63
 8002814:	c7520000 	.word	0xc7520000
 8002818:	cfb80000 	.word	0xcfb80000

0800281c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7a      	ldr	r2, [pc, #488]	; (8002a14 <ADC_ConfigureBoostMode+0x1f8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <ADC_ConfigureBoostMode+0x1c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a79      	ldr	r2, [pc, #484]	; (8002a18 <ADC_ConfigureBoostMode+0x1fc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d109      	bne.n	800284c <ADC_ConfigureBoostMode+0x30>
 8002838:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <ADC_ConfigureBoostMode+0x200>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e008      	b.n	800285e <ADC_ConfigureBoostMode+0x42>
 800284c:	4b74      	ldr	r3, [pc, #464]	; (8002a20 <ADC_ConfigureBoostMode+0x204>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01c      	beq.n	800289c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002862:	f001 fc75 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8002866:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002870:	d010      	beq.n	8002894 <ADC_ConfigureBoostMode+0x78>
 8002872:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002876:	d873      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x144>
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d002      	beq.n	8002884 <ADC_ConfigureBoostMode+0x68>
 800287e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002882:	d16d      	bne.n	8002960 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	60fb      	str	r3, [r7, #12]
        break;
 8002892:	e068      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	60fb      	str	r3, [r7, #12]
        break;
 800289a:	e064      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800289c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028a0:	f04f 0100 	mov.w	r1, #0
 80028a4:	f002 feba 	bl	800561c <HAL_RCCEx_GetPeriphCLKFreq>
 80028a8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028b2:	d051      	beq.n	8002958 <ADC_ConfigureBoostMode+0x13c>
 80028b4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028b8:	d854      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028ba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028be:	d047      	beq.n	8002950 <ADC_ConfigureBoostMode+0x134>
 80028c0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028c4:	d84e      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028c6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028ca:	d03d      	beq.n	8002948 <ADC_ConfigureBoostMode+0x12c>
 80028cc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028d0:	d848      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d6:	d033      	beq.n	8002940 <ADC_ConfigureBoostMode+0x124>
 80028d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028dc:	d842      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028de:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028e2:	d029      	beq.n	8002938 <ADC_ConfigureBoostMode+0x11c>
 80028e4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028e8:	d83c      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028ea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028ee:	d01a      	beq.n	8002926 <ADC_ConfigureBoostMode+0x10a>
 80028f0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028f4:	d836      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028f6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80028fa:	d014      	beq.n	8002926 <ADC_ConfigureBoostMode+0x10a>
 80028fc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002900:	d830      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 8002902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002906:	d00e      	beq.n	8002926 <ADC_ConfigureBoostMode+0x10a>
 8002908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290c:	d82a      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 800290e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002912:	d008      	beq.n	8002926 <ADC_ConfigureBoostMode+0x10a>
 8002914:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002918:	d824      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 800291a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800291e:	d002      	beq.n	8002926 <ADC_ConfigureBoostMode+0x10a>
 8002920:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002924:	d11e      	bne.n	8002964 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	0c9b      	lsrs	r3, r3, #18
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	60fb      	str	r3, [r7, #12]
        break;
 8002936:	e016      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
        break;
 800293e:	e012      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	60fb      	str	r3, [r7, #12]
        break;
 8002946:	e00e      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	099b      	lsrs	r3, r3, #6
 800294c:	60fb      	str	r3, [r7, #12]
        break;
 800294e:	e00a      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	09db      	lsrs	r3, r3, #7
 8002954:	60fb      	str	r3, [r7, #12]
        break;
 8002956:	e006      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	60fb      	str	r3, [r7, #12]
        break;
 800295e:	e002      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002960:	bf00      	nop
 8002962:	e000      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002964:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002966:	f7ff f8ad 	bl	8001ac4 <HAL_GetREVID>
 800296a:	4603      	mov	r3, r0
 800296c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002970:	4293      	cmp	r3, r2
 8002972:	d815      	bhi.n	80029a0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <ADC_ConfigureBoostMode+0x208>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d908      	bls.n	800298e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800298c:	e03e      	b.n	8002a0c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800299c:	609a      	str	r2, [r3, #8]
}
 800299e:	e035      	b.n	8002a0c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <ADC_ConfigureBoostMode+0x20c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d808      	bhi.n	80029c0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029bc:	609a      	str	r2, [r3, #8]
}
 80029be:	e025      	b.n	8002a0c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <ADC_ConfigureBoostMode+0x210>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d80a      	bhi.n	80029de <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029da:	609a      	str	r2, [r3, #8]
}
 80029dc:	e016      	b.n	8002a0c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <ADC_ConfigureBoostMode+0x214>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d80a      	bhi.n	80029fc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f8:	609a      	str	r2, [r3, #8]
}
 80029fa:	e007      	b.n	8002a0c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a0a:	609a      	str	r2, [r3, #8]
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40022000 	.word	0x40022000
 8002a18:	40022100 	.word	0x40022100
 8002a1c:	40022300 	.word	0x40022300
 8002a20:	58026300 	.word	0x58026300
 8002a24:	01312d00 	.word	0x01312d00
 8002a28:	005f5e10 	.word	0x005f5e10
 8002a2c:	00bebc20 	.word	0x00bebc20
 8002a30:	017d7840 	.word	0x017d7840

08002a34 <LL_ADC_IsEnabled>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <LL_ADC_IsEnabled+0x18>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <LL_ADC_IsEnabled+0x1a>
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_ADC_REG_IsConversionOngoing>:
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d101      	bne.n	8002a72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b09f      	sub	sp, #124	; 0x7c
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e0be      	b.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5c      	ldr	r2, [pc, #368]	; (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d102      	bne.n	8002abe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ab8:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	e001      	b.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e09d      	b.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ffb9 	bl	8002a5a <LL_ADC_REG_IsConversionOngoing>
 8002ae8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ffb3 	bl	8002a5a <LL_ADC_REG_IsConversionOngoing>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d17f      	bne.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d17c      	bne.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a47      	ldr	r2, [pc, #284]	; (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a46      	ldr	r2, [pc, #280]	; (8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002b14:	4b45      	ldr	r3, [pc, #276]	; (8002c2c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002b16:	e000      	b.n	8002b1a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002b18:	4b45      	ldr	r3, [pc, #276]	; (8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002b1a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d039      	beq.n	8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a3a      	ldr	r2, [pc, #232]	; (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a38      	ldr	r2, [pc, #224]	; (8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10e      	bne.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b4a:	4836      	ldr	r0, [pc, #216]	; (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b4c:	f7ff ff72 	bl	8002a34 <LL_ADC_IsEnabled>
 8002b50:	4604      	mov	r4, r0
 8002b52:	4835      	ldr	r0, [pc, #212]	; (8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b54:	f7ff ff6e 	bl	8002a34 <LL_ADC_IsEnabled>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4323      	orrs	r3, r4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e008      	b.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002b68:	4832      	ldr	r0, [pc, #200]	; (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b6a:	f7ff ff63 	bl	8002a34 <LL_ADC_IsEnabled>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d047      	beq.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	6811      	ldr	r1, [r2, #0]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	6892      	ldr	r2, [r2, #8]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	431a      	orrs	r2, r3
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b96:	e03a      	b.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1e      	ldr	r2, [pc, #120]	; (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1d      	ldr	r2, [pc, #116]	; (8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002bb8:	481a      	ldr	r0, [pc, #104]	; (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bba:	f7ff ff3b 	bl	8002a34 <LL_ADC_IsEnabled>
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	4819      	ldr	r0, [pc, #100]	; (8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bc2:	f7ff ff37 	bl	8002a34 <LL_ADC_IsEnabled>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4323      	orrs	r3, r4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	e008      	b.n	8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002bd6:	4817      	ldr	r0, [pc, #92]	; (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002bd8:	f7ff ff2c 	bl	8002a34 <LL_ADC_IsEnabled>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d010      	beq.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bf6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf8:	e009      	b.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	f043 0220 	orr.w	r2, r3, #32
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c0c:	e000      	b.n	8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c0e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	377c      	adds	r7, #124	; 0x7c
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}
 8002c24:	40022000 	.word	0x40022000
 8002c28:	40022100 	.word	0x40022100
 8002c2c:	40022300 	.word	0x40022300
 8002c30:	58026300 	.word	0x58026300
 8002c34:	58026000 	.word	0x58026000
 8002c38:	fffff0e0 	.word	0xfffff0e0

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <__NVIC_SetPriorityGrouping+0x40>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6a:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <__NVIC_SetPriorityGrouping+0x40>)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	60d3      	str	r3, [r2, #12]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00
 8002c80:	05fa0000 	.word	0x05fa0000

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	; (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	; (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f7ff ff8e 	bl	8002ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff47 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc4:	f7ff ff5e 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff90 	bl	8002cf4 <NVIC_EncodePriority>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff5f 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ffb2 	bl	8002d5c <SysTick_Config>
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e12:	4b89      	ldr	r3, [pc, #548]	; (8003038 <HAL_GPIO_Init+0x234>)
 8002e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e16:	e194      	b.n	8003142 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8186 	beq.w	800313c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d005      	beq.n	8002e48 <HAL_GPIO_Init+0x44>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d130      	bne.n	8002eaa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e7e:	2201      	movs	r2, #1
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0201 	and.w	r2, r3, #1
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d017      	beq.n	8002ee6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d123      	bne.n	8002f3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	08da      	lsrs	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3208      	adds	r2, #8
 8002efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	08da      	lsrs	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3208      	adds	r2, #8
 8002f34:	69b9      	ldr	r1, [r7, #24]
 8002f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0203 	and.w	r2, r3, #3
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80e0 	beq.w	800313c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_GPIO_Init+0x238>)
 8002f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f82:	4a2e      	ldr	r2, [pc, #184]	; (800303c <HAL_GPIO_Init+0x238>)
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_GPIO_Init+0x238>)
 8002f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f9a:	4a29      	ldr	r2, [pc, #164]	; (8003040 <HAL_GPIO_Init+0x23c>)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HAL_GPIO_Init+0x240>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d052      	beq.n	800306c <HAL_GPIO_Init+0x268>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <HAL_GPIO_Init+0x244>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d031      	beq.n	8003032 <HAL_GPIO_Init+0x22e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1e      	ldr	r2, [pc, #120]	; (800304c <HAL_GPIO_Init+0x248>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02b      	beq.n	800302e <HAL_GPIO_Init+0x22a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_GPIO_Init+0x24c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d025      	beq.n	800302a <HAL_GPIO_Init+0x226>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <HAL_GPIO_Init+0x250>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01f      	beq.n	8003026 <HAL_GPIO_Init+0x222>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <HAL_GPIO_Init+0x254>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d019      	beq.n	8003022 <HAL_GPIO_Init+0x21e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	; (800305c <HAL_GPIO_Init+0x258>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_GPIO_Init+0x21a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a19      	ldr	r2, [pc, #100]	; (8003060 <HAL_GPIO_Init+0x25c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00d      	beq.n	800301a <HAL_GPIO_Init+0x216>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_GPIO_Init+0x260>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_GPIO_Init+0x212>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a17      	ldr	r2, [pc, #92]	; (8003068 <HAL_GPIO_Init+0x264>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_GPIO_Init+0x20e>
 800300e:	2309      	movs	r3, #9
 8003010:	e02d      	b.n	800306e <HAL_GPIO_Init+0x26a>
 8003012:	230a      	movs	r3, #10
 8003014:	e02b      	b.n	800306e <HAL_GPIO_Init+0x26a>
 8003016:	2308      	movs	r3, #8
 8003018:	e029      	b.n	800306e <HAL_GPIO_Init+0x26a>
 800301a:	2307      	movs	r3, #7
 800301c:	e027      	b.n	800306e <HAL_GPIO_Init+0x26a>
 800301e:	2306      	movs	r3, #6
 8003020:	e025      	b.n	800306e <HAL_GPIO_Init+0x26a>
 8003022:	2305      	movs	r3, #5
 8003024:	e023      	b.n	800306e <HAL_GPIO_Init+0x26a>
 8003026:	2304      	movs	r3, #4
 8003028:	e021      	b.n	800306e <HAL_GPIO_Init+0x26a>
 800302a:	2303      	movs	r3, #3
 800302c:	e01f      	b.n	800306e <HAL_GPIO_Init+0x26a>
 800302e:	2302      	movs	r3, #2
 8003030:	e01d      	b.n	800306e <HAL_GPIO_Init+0x26a>
 8003032:	2301      	movs	r3, #1
 8003034:	e01b      	b.n	800306e <HAL_GPIO_Init+0x26a>
 8003036:	bf00      	nop
 8003038:	58000080 	.word	0x58000080
 800303c:	58024400 	.word	0x58024400
 8003040:	58000400 	.word	0x58000400
 8003044:	58020000 	.word	0x58020000
 8003048:	58020400 	.word	0x58020400
 800304c:	58020800 	.word	0x58020800
 8003050:	58020c00 	.word	0x58020c00
 8003054:	58021000 	.word	0x58021000
 8003058:	58021400 	.word	0x58021400
 800305c:	58021800 	.word	0x58021800
 8003060:	58021c00 	.word	0x58021c00
 8003064:	58022000 	.word	0x58022000
 8003068:	58022400 	.word	0x58022400
 800306c:	2300      	movs	r3, #0
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	f002 0203 	and.w	r2, r2, #3
 8003074:	0092      	lsls	r2, r2, #2
 8003076:	4093      	lsls	r3, r2
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800307e:	4938      	ldr	r1, [pc, #224]	; (8003160 <HAL_GPIO_Init+0x35c>)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80030b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	3301      	adds	r3, #1
 8003140:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	f47f ae63 	bne.w	8002e18 <HAL_GPIO_Init+0x14>
  }
}
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	3724      	adds	r7, #36	; 0x24
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	58000400 	.word	0x58000400

08003164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	e001      	b.n	8003186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
 80031a0:	4613      	mov	r3, r2
 80031a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031a4:	787b      	ldrb	r3, [r7, #1]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80031b0:	e003      	b.n	80031ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	041a      	lsls	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	619a      	str	r2, [r3, #24]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_PWREx_ConfigSupply+0x70>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d00a      	beq.n	80031f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_PWREx_ConfigSupply+0x70>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d001      	beq.n	80031ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e01f      	b.n	800322e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e01d      	b.n	800322e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_PWREx_ConfigSupply+0x70>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 0207 	bic.w	r2, r3, #7
 80031fa:	490f      	ldr	r1, [pc, #60]	; (8003238 <HAL_PWREx_ConfigSupply+0x70>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003202:	f7fe fc53 	bl	8001aac <HAL_GetTick>
 8003206:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003208:	e009      	b.n	800321e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800320a:	f7fe fc4f 	bl	8001aac <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003218:	d901      	bls.n	800321e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e007      	b.n	800322e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_PWREx_ConfigSupply+0x70>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322a:	d1ee      	bne.n	800320a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	58024800 	.word	0x58024800

0800323c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f000 bc48 	b.w	8003ae0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8088 	beq.w	800336e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325e:	4b99      	ldr	r3, [pc, #612]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003268:	4b96      	ldr	r3, [pc, #600]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	2b10      	cmp	r3, #16
 8003272:	d007      	beq.n	8003284 <HAL_RCC_OscConfig+0x48>
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	2b18      	cmp	r3, #24
 8003278:	d111      	bne.n	800329e <HAL_RCC_OscConfig+0x62>
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d10c      	bne.n	800329e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003284:	4b8f      	ldr	r3, [pc, #572]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d06d      	beq.n	800336c <HAL_RCC_OscConfig+0x130>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d169      	bne.n	800336c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f000 bc21 	b.w	8003ae0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x7a>
 80032a8:	4b86      	ldr	r3, [pc, #536]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a85      	ldr	r2, [pc, #532]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e02e      	b.n	8003314 <HAL_RCC_OscConfig+0xd8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x9c>
 80032be:	4b81      	ldr	r3, [pc, #516]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a80      	ldr	r2, [pc, #512]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b7e      	ldr	r3, [pc, #504]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7d      	ldr	r2, [pc, #500]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e01d      	b.n	8003314 <HAL_RCC_OscConfig+0xd8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0xc0>
 80032e2:	4b78      	ldr	r3, [pc, #480]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a77      	ldr	r2, [pc, #476]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b75      	ldr	r3, [pc, #468]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a74      	ldr	r2, [pc, #464]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0xd8>
 80032fc:	4b71      	ldr	r3, [pc, #452]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a70      	ldr	r2, [pc, #448]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b6e      	ldr	r3, [pc, #440]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a6d      	ldr	r2, [pc, #436]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 800330e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fbc6 	bl	8001aac <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fe fbc2 	bl	8001aac <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e3d4      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0xe8>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe fbb2 	bl	8001aac <HAL_GetTick>
 8003348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7fe fbae 	bl	8001aac <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e3c0      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800335e:	4b59      	ldr	r3, [pc, #356]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x110>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80ca 	beq.w	8003510 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800337c:	4b51      	ldr	r3, [pc, #324]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003384:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003386:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <HAL_RCC_OscConfig+0x166>
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	2b18      	cmp	r3, #24
 8003396:	d156      	bne.n	8003446 <HAL_RCC_OscConfig+0x20a>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d151      	bne.n	8003446 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a2:	4b48      	ldr	r3, [pc, #288]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x17e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e392      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033ba:	4b42      	ldr	r3, [pc, #264]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 0219 	bic.w	r2, r3, #25
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	493f      	ldr	r1, [pc, #252]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fb6e 	bl	8001aac <HAL_GetTick>
 80033d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d4:	f7fe fb6a 	bl	8001aac <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e37c      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e6:	4b37      	ldr	r3, [pc, #220]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	f7fe fb67 	bl	8001ac4 <HAL_GetREVID>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d817      	bhi.n	8003430 <HAL_RCC_OscConfig+0x1f4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d108      	bne.n	800341a <HAL_RCC_OscConfig+0x1de>
 8003408:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003410:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 8003412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003416:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003418:	e07a      	b.n	8003510 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341a:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	031b      	lsls	r3, r3, #12
 8003428:	4926      	ldr	r1, [pc, #152]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800342e:	e06f      	b.n	8003510 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003430:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	061b      	lsls	r3, r3, #24
 800343e:	4921      	ldr	r1, [pc, #132]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003444:	e064      	b.n	8003510 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d047      	beq.n	80034de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 0219 	bic.w	r2, r3, #25
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	491a      	ldr	r1, [pc, #104]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 800345c:	4313      	orrs	r3, r2
 800345e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fb24 	bl	8001aac <HAL_GetTick>
 8003464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fe fb20 	bl	8001aac <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e332      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800347a:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	f7fe fb1d 	bl	8001ac4 <HAL_GetREVID>
 800348a:	4603      	mov	r3, r0
 800348c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003490:	4293      	cmp	r3, r2
 8003492:	d819      	bhi.n	80034c8 <HAL_RCC_OscConfig+0x28c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d108      	bne.n	80034ae <HAL_RCC_OscConfig+0x272>
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80034a4:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80034a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034aa:	6053      	str	r3, [r2, #4]
 80034ac:	e030      	b.n	8003510 <HAL_RCC_OscConfig+0x2d4>
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	031b      	lsls	r3, r3, #12
 80034bc:	4901      	ldr	r1, [pc, #4]	; (80034c4 <HAL_RCC_OscConfig+0x288>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
 80034c2:	e025      	b.n	8003510 <HAL_RCC_OscConfig+0x2d4>
 80034c4:	58024400 	.word	0x58024400
 80034c8:	4b9a      	ldr	r3, [pc, #616]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	4997      	ldr	r1, [pc, #604]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
 80034dc:	e018      	b.n	8003510 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034de:	4b95      	ldr	r3, [pc, #596]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a94      	ldr	r2, [pc, #592]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe fadf 	bl	8001aac <HAL_GetTick>
 80034ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe fadb 	bl	8001aac <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e2ed      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003504:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80a9 	beq.w	8003670 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003526:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003528:	4b82      	ldr	r3, [pc, #520]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d007      	beq.n	8003544 <HAL_RCC_OscConfig+0x308>
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b18      	cmp	r3, #24
 8003538:	d13a      	bne.n	80035b0 <HAL_RCC_OscConfig+0x374>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d135      	bne.n	80035b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003544:	4b7b      	ldr	r3, [pc, #492]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_OscConfig+0x320>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	2b80      	cmp	r3, #128	; 0x80
 8003556:	d001      	beq.n	800355c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e2c1      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800355c:	f7fe fab2 	bl	8001ac4 <HAL_GetREVID>
 8003560:	4603      	mov	r3, r0
 8003562:	f241 0203 	movw	r2, #4099	; 0x1003
 8003566:	4293      	cmp	r3, r2
 8003568:	d817      	bhi.n	800359a <HAL_RCC_OscConfig+0x35e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	2b20      	cmp	r3, #32
 8003570:	d108      	bne.n	8003584 <HAL_RCC_OscConfig+0x348>
 8003572:	4b70      	ldr	r3, [pc, #448]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800357a:	4a6e      	ldr	r2, [pc, #440]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 800357c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003580:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003582:	e075      	b.n	8003670 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003584:	4b6b      	ldr	r3, [pc, #428]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	069b      	lsls	r3, r3, #26
 8003592:	4968      	ldr	r1, [pc, #416]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003598:	e06a      	b.n	8003670 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800359a:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	061b      	lsls	r3, r3, #24
 80035a8:	4962      	ldr	r1, [pc, #392]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035ae:	e05f      	b.n	8003670 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d042      	beq.n	800363e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80035b8:	4b5e      	ldr	r3, [pc, #376]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5d      	ldr	r2, [pc, #372]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80035be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe fa72 	bl	8001aac <HAL_GetTick>
 80035c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035cc:	f7fe fa6e 	bl	8001aac <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e280      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035de:	4b55      	ldr	r3, [pc, #340]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035ea:	f7fe fa6b 	bl	8001ac4 <HAL_GetREVID>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d817      	bhi.n	8003628 <HAL_RCC_OscConfig+0x3ec>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d108      	bne.n	8003612 <HAL_RCC_OscConfig+0x3d6>
 8003600:	4b4c      	ldr	r3, [pc, #304]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003608:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 800360a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800360e:	6053      	str	r3, [r2, #4]
 8003610:	e02e      	b.n	8003670 <HAL_RCC_OscConfig+0x434>
 8003612:	4b48      	ldr	r3, [pc, #288]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	069b      	lsls	r3, r3, #26
 8003620:	4944      	ldr	r1, [pc, #272]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
 8003626:	e023      	b.n	8003670 <HAL_RCC_OscConfig+0x434>
 8003628:	4b42      	ldr	r3, [pc, #264]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	493f      	ldr	r1, [pc, #252]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003638:	4313      	orrs	r3, r2
 800363a:	60cb      	str	r3, [r1, #12]
 800363c:	e018      	b.n	8003670 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800363e:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a3c      	ldr	r2, [pc, #240]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fe fa2f 	bl	8001aac <HAL_GetTick>
 800364e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003652:	f7fe fa2b 	bl	8001aac <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e23d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003664:	4b33      	ldr	r3, [pc, #204]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d036      	beq.n	80036ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d019      	beq.n	80036b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003684:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003688:	4a2a      	ldr	r2, [pc, #168]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe fa0c 	bl	8001aac <HAL_GetTick>
 8003694:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003698:	f7fe fa08 	bl	8001aac <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e21a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036aa:	4b22      	ldr	r3, [pc, #136]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x45c>
 80036b6:	e018      	b.n	80036ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b8:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe f9f2 	bl	8001aac <HAL_GetTick>
 80036c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7fe f9ee 	bl	8001aac <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e200      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 80036e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d039      	beq.n	800376a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01c      	beq.n	8003738 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003708:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800370a:	f7fe f9cf 	bl	8001aac <HAL_GetTick>
 800370e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003712:	f7fe f9cb 	bl	8001aac <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1dd      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <HAL_RCC_OscConfig+0x4f8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x4d6>
 8003730:	e01b      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
 8003732:	bf00      	nop
 8003734:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003738:	4b9b      	ldr	r3, [pc, #620]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a9a      	ldr	r2, [pc, #616]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800373e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003742:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003744:	f7fe f9b2 	bl	8001aac <HAL_GetTick>
 8003748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800374c:	f7fe f9ae 	bl	8001aac <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1c0      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800375e:	4b92      	ldr	r3, [pc, #584]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8081 	beq.w	800387a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003778:	4b8c      	ldr	r3, [pc, #560]	; (80039ac <HAL_RCC_OscConfig+0x770>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a8b      	ldr	r2, [pc, #556]	; (80039ac <HAL_RCC_OscConfig+0x770>)
 800377e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003782:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003784:	f7fe f992 	bl	8001aac <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378c:	f7fe f98e 	bl	8001aac <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1a0      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800379e:	4b83      	ldr	r3, [pc, #524]	; (80039ac <HAL_RCC_OscConfig+0x770>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d106      	bne.n	80037c0 <HAL_RCC_OscConfig+0x584>
 80037b2:	4b7d      	ldr	r3, [pc, #500]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a7c      	ldr	r2, [pc, #496]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	e02d      	b.n	800381c <HAL_RCC_OscConfig+0x5e0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCC_OscConfig+0x5a6>
 80037c8:	4b77      	ldr	r3, [pc, #476]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a76      	ldr	r2, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
 80037d4:	4b74      	ldr	r3, [pc, #464]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	4a73      	ldr	r2, [pc, #460]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80037da:	f023 0304 	bic.w	r3, r3, #4
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
 80037e0:	e01c      	b.n	800381c <HAL_RCC_OscConfig+0x5e0>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c8>
 80037ea:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a6e      	ldr	r2, [pc, #440]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
 80037f6:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a6b      	ldr	r2, [pc, #428]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x5e0>
 8003804:	4b68      	ldr	r3, [pc, #416]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a67      	ldr	r2, [pc, #412]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a64      	ldr	r2, [pc, #400]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003816:	f023 0304 	bic.w	r3, r3, #4
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fe f942 	bl	8001aac <HAL_GetTick>
 8003828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fe f93e 	bl	8001aac <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e14e      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003842:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ee      	beq.n	800382c <HAL_RCC_OscConfig+0x5f0>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003850:	f7fe f92c 	bl	8001aac <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fe f928 	bl	8001aac <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e138      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800386e:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ee      	bne.n	8003858 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 812d 	beq.w	8003ade <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003884:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800388c:	2b18      	cmp	r3, #24
 800388e:	f000 80bd 	beq.w	8003a0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	2b02      	cmp	r3, #2
 8003898:	f040 809e 	bne.w	80039d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b42      	ldr	r3, [pc, #264]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a41      	ldr	r2, [pc, #260]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80038a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fe f900 	bl	8001aac <HAL_GetTick>
 80038ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fe f8fc 	bl	8001aac <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e10e      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038c2:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ce:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80038d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038d2:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <HAL_RCC_OscConfig+0x774>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038de:	0112      	lsls	r2, r2, #4
 80038e0:	430a      	orrs	r2, r1
 80038e2:	4931      	ldr	r1, [pc, #196]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	628b      	str	r3, [r1, #40]	; 0x28
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	3b01      	subs	r3, #1
 80038ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f6:	3b01      	subs	r3, #1
 80038f8:	025b      	lsls	r3, r3, #9
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	3b01      	subs	r3, #1
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	3b01      	subs	r3, #1
 8003912:	061b      	lsls	r3, r3, #24
 8003914:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003918:	4923      	ldr	r1, [pc, #140]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	4a21      	ldr	r2, [pc, #132]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800392a:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800392c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800392e:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <HAL_RCC_OscConfig+0x778>)
 8003930:	4013      	ands	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003936:	00d2      	lsls	r2, r2, #3
 8003938:	491b      	ldr	r1, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800393e:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	f023 020c 	bic.w	r2, r3, #12
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	4917      	ldr	r1, [pc, #92]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800394c:	4313      	orrs	r3, r2
 800394e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003950:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	f023 0202 	bic.w	r2, r3, #2
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	4912      	ldr	r1, [pc, #72]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800395e:	4313      	orrs	r3, r2
 8003960:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	4a10      	ldr	r2, [pc, #64]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	4a0d      	ldr	r2, [pc, #52]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003978:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003984:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	4a07      	ldr	r2, [pc, #28]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 8003998:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800399c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fe f885 	bl	8001aac <HAL_GetTick>
 80039a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039a4:	e011      	b.n	80039ca <HAL_RCC_OscConfig+0x78e>
 80039a6:	bf00      	nop
 80039a8:	58024400 	.word	0x58024400
 80039ac:	58024800 	.word	0x58024800
 80039b0:	fffffc0c 	.word	0xfffffc0c
 80039b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe f878 	bl	8001aac <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e08a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039ca:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x77c>
 80039d6:	e082      	b.n	8003ade <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d8:	4b43      	ldr	r3, [pc, #268]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 80039de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fe f862 	bl	8001aac <HAL_GetTick>
 80039e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fe f85e 	bl	8001aac <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e070      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039fe:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x7b0>
 8003a0a:	e068      	b.n	8003ade <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a0c:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a12:	4b35      	ldr	r3, [pc, #212]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d031      	beq.n	8003a84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f003 0203 	and.w	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d12a      	bne.n	8003a84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d122      	bne.n	8003a84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d11a      	bne.n	8003a84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	0a5b      	lsrs	r3, r3, #9
 8003a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d111      	bne.n	8003a84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	0c1b      	lsrs	r3, r3, #16
 8003a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d108      	bne.n	8003a84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	0e1b      	lsrs	r3, r3, #24
 8003a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e02b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	08db      	lsrs	r3, r3, #3
 8003a8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d01f      	beq.n	8003ade <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003a9e:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003aaa:	f7fd ffff 	bl	8001aac <HAL_GetTick>
 8003aae:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ab0:	bf00      	nop
 8003ab2:	f7fd fffb 	bl	8001aac <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d0f9      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 8003ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_RCC_OscConfig+0x8b0>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003aca:	00d2      	lsls	r2, r2, #3
 8003acc:	4906      	ldr	r1, [pc, #24]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <HAL_RCC_OscConfig+0x8ac>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3730      	adds	r7, #48	; 0x30
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	58024400 	.word	0x58024400
 8003aec:	ffff0007 	.word	0xffff0007

08003af0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e19c      	b.n	8003e3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b04:	4b8a      	ldr	r3, [pc, #552]	; (8003d30 <HAL_RCC_ClockConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d910      	bls.n	8003b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b87      	ldr	r3, [pc, #540]	; (8003d30 <HAL_RCC_ClockConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 020f 	bic.w	r2, r3, #15
 8003b1a:	4985      	ldr	r1, [pc, #532]	; (8003d30 <HAL_RCC_ClockConfig+0x240>)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b83      	ldr	r3, [pc, #524]	; (8003d30 <HAL_RCC_ClockConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e184      	b.n	8003e3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d010      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	4b7b      	ldr	r3, [pc, #492]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d908      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b50:	4b78      	ldr	r3, [pc, #480]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	4975      	ldr	r1, [pc, #468]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d010      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	4b70      	ldr	r3, [pc, #448]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d908      	bls.n	8003b90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b7e:	4b6d      	ldr	r3, [pc, #436]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	496a      	ldr	r1, [pc, #424]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	4b64      	ldr	r3, [pc, #400]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d908      	bls.n	8003bbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bac:	4b61      	ldr	r3, [pc, #388]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	495e      	ldr	r1, [pc, #376]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	4b59      	ldr	r3, [pc, #356]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d908      	bls.n	8003bec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bda:	4b56      	ldr	r3, [pc, #344]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4953      	ldr	r1, [pc, #332]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	4b4d      	ldr	r3, [pc, #308]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d908      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f023 020f 	bic.w	r2, r3, #15
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4947      	ldr	r1, [pc, #284]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d055      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c26:	4b43      	ldr	r3, [pc, #268]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	4940      	ldr	r1, [pc, #256]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d107      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c40:	4b3c      	ldr	r3, [pc, #240]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d121      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0f6      	b.n	8003e3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c58:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d115      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0ea      	b.n	8003e3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d107      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c70:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0de      	b.n	8003e3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c80:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0d6      	b.n	8003e3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c90:	4b28      	ldr	r3, [pc, #160]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f023 0207 	bic.w	r2, r3, #7
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	4925      	ldr	r1, [pc, #148]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca2:	f7fd ff03 	bl	8001aac <HAL_GetTick>
 8003ca6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003caa:	f7fd feff 	bl	8001aac <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e0be      	b.n	8003e3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d1eb      	bne.n	8003caa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d010      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d208      	bcs.n	8003d00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f023 020f 	bic.w	r2, r3, #15
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	490e      	ldr	r1, [pc, #56]	; (8003d34 <HAL_RCC_ClockConfig+0x244>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_ClockConfig+0x240>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d214      	bcs.n	8003d38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <HAL_RCC_ClockConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 020f 	bic.w	r2, r3, #15
 8003d16:	4906      	ldr	r1, [pc, #24]	; (8003d30 <HAL_RCC_ClockConfig+0x240>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <HAL_RCC_ClockConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e086      	b.n	8003e3e <HAL_RCC_ClockConfig+0x34e>
 8003d30:	52002000 	.word	0x52002000
 8003d34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	4b3f      	ldr	r3, [pc, #252]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d208      	bcs.n	8003d66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d54:	4b3c      	ldr	r3, [pc, #240]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	4939      	ldr	r1, [pc, #228]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	4b34      	ldr	r3, [pc, #208]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d208      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d82:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	492e      	ldr	r1, [pc, #184]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d010      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699a      	ldr	r2, [r3, #24]
 8003da4:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d208      	bcs.n	8003dc2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003db0:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	4922      	ldr	r1, [pc, #136]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d010      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d208      	bcs.n	8003df0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003dde:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	4917      	ldr	r1, [pc, #92]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003df0:	f000 f834 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	4912      	ldr	r1, [pc, #72]	; (8003e4c <HAL_RCC_ClockConfig+0x35c>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e0e:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <HAL_RCC_ClockConfig+0x358>)
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <HAL_RCC_ClockConfig+0x35c>)
 8003e18:	5cd3      	ldrb	r3, [r2, r3]
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
 8003e24:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <HAL_RCC_ClockConfig+0x360>)
 8003e26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e28:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HAL_RCC_ClockConfig+0x364>)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x368>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd fdf0 	bl	8001a18 <HAL_InitTick>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	080086f8 	.word	0x080086f8
 8003e50:	24000004 	.word	0x24000004
 8003e54:	24000000 	.word	0x24000000
 8003e58:	24000008 	.word	0x24000008

08003e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e62:	4bb3      	ldr	r3, [pc, #716]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e6a:	2b18      	cmp	r3, #24
 8003e6c:	f200 8155 	bhi.w	800411a <HAL_RCC_GetSysClockFreq+0x2be>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003edd 	.word	0x08003edd
 8003e7c:	0800411b 	.word	0x0800411b
 8003e80:	0800411b 	.word	0x0800411b
 8003e84:	0800411b 	.word	0x0800411b
 8003e88:	0800411b 	.word	0x0800411b
 8003e8c:	0800411b 	.word	0x0800411b
 8003e90:	0800411b 	.word	0x0800411b
 8003e94:	0800411b 	.word	0x0800411b
 8003e98:	08003f03 	.word	0x08003f03
 8003e9c:	0800411b 	.word	0x0800411b
 8003ea0:	0800411b 	.word	0x0800411b
 8003ea4:	0800411b 	.word	0x0800411b
 8003ea8:	0800411b 	.word	0x0800411b
 8003eac:	0800411b 	.word	0x0800411b
 8003eb0:	0800411b 	.word	0x0800411b
 8003eb4:	0800411b 	.word	0x0800411b
 8003eb8:	08003f09 	.word	0x08003f09
 8003ebc:	0800411b 	.word	0x0800411b
 8003ec0:	0800411b 	.word	0x0800411b
 8003ec4:	0800411b 	.word	0x0800411b
 8003ec8:	0800411b 	.word	0x0800411b
 8003ecc:	0800411b 	.word	0x0800411b
 8003ed0:	0800411b 	.word	0x0800411b
 8003ed4:	0800411b 	.word	0x0800411b
 8003ed8:	08003f0f 	.word	0x08003f0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003edc:	4b94      	ldr	r3, [pc, #592]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ee8:	4b91      	ldr	r3, [pc, #580]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	08db      	lsrs	r3, r3, #3
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	4a90      	ldr	r2, [pc, #576]	; (8004134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003efa:	e111      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003efc:	4b8d      	ldr	r3, [pc, #564]	; (8004134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003efe:	61bb      	str	r3, [r7, #24]
      break;
 8003f00:	e10e      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003f02:	4b8d      	ldr	r3, [pc, #564]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f04:	61bb      	str	r3, [r7, #24]
      break;
 8003f06:	e10b      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003f08:	4b8c      	ldr	r3, [pc, #560]	; (800413c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f0a:	61bb      	str	r3, [r7, #24]
      break;
 8003f0c:	e108      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f0e:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f18:	4b85      	ldr	r3, [pc, #532]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f24:	4b82      	ldr	r3, [pc, #520]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f2e:	4b80      	ldr	r3, [pc, #512]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	08db      	lsrs	r3, r3, #3
 8003f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80e1 	beq.w	8004114 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	f000 8083 	beq.w	8004060 <HAL_RCC_GetSysClockFreq+0x204>
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	f200 80a1 	bhi.w	80040a4 <HAL_RCC_GetSysClockFreq+0x248>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x114>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d056      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f6e:	e099      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f70:	4b6f      	ldr	r3, [pc, #444]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d02d      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f7c:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	08db      	lsrs	r3, r3, #3
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	4a6b      	ldr	r2, [pc, #428]	; (8004134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f88:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa6:	4b62      	ldr	r3, [pc, #392]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003fd6:	e087      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004144 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fea:	4b51      	ldr	r3, [pc, #324]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ffe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800400e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004016:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800401a:	e065      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004026:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004148 <HAL_RCC_GetSysClockFreq+0x2ec>
 800402a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402e:	4b40      	ldr	r3, [pc, #256]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004042:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800405e:	e043      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800414c <HAL_RCC_GetSysClockFreq+0x2f0>
 800406e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004072:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004082:	ed97 6a02 	vldr	s12, [r7, #8]
 8004086:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004140 <HAL_RCC_GetSysClockFreq+0x2e4>
 800408a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040a2:	e021      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004148 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b6:	4b1e      	ldr	r3, [pc, #120]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004140 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	0a5b      	lsrs	r3, r3, #9
 80040ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f2:	3301      	adds	r3, #1
 80040f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	ee07 3a90 	vmov	s15, r3
 80040fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004100:	edd7 6a07 	vldr	s13, [r7, #28]
 8004104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800410c:	ee17 3a90 	vmov	r3, s15
 8004110:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004112:	e005      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	61bb      	str	r3, [r7, #24]
      break;
 8004118:	e002      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800411c:	61bb      	str	r3, [r7, #24]
      break;
 800411e:	bf00      	nop
  }

  return sysclockfreq;
 8004120:	69bb      	ldr	r3, [r7, #24]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	; 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	58024400 	.word	0x58024400
 8004134:	03d09000 	.word	0x03d09000
 8004138:	003d0900 	.word	0x003d0900
 800413c:	017d7840 	.word	0x017d7840
 8004140:	46000000 	.word	0x46000000
 8004144:	4c742400 	.word	0x4c742400
 8004148:	4a742400 	.word	0x4a742400
 800414c:	4bbebc20 	.word	0x4bbebc20

08004150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004156:	f7ff fe81 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 800415a:	4602      	mov	r2, r0
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	0a1b      	lsrs	r3, r3, #8
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	490f      	ldr	r1, [pc, #60]	; (80041a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004168:	5ccb      	ldrb	r3, [r1, r3]
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	fa22 f303 	lsr.w	r3, r2, r3
 8004172:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800417e:	5cd3      	ldrb	r3, [r2, r3]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	fa22 f303 	lsr.w	r3, r2, r3
 800418a:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800418c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004196:	681b      	ldr	r3, [r3, #0]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	58024400 	.word	0x58024400
 80041a4:	080086f8 	.word	0x080086f8
 80041a8:	24000004 	.word	0x24000004
 80041ac:	24000000 	.word	0x24000000

080041b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041b4:	f7ff ffcc 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4904      	ldr	r1, [pc, #16]	; (80041d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	58024400 	.word	0x58024400
 80041d8:	080086f8 	.word	0x080086f8

080041dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80041e0:	f7ff ffb6 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4904      	ldr	r1, [pc, #16]	; (8004204 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	58024400 	.word	0x58024400
 8004204:	080086f8 	.word	0x080086f8

08004208 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800420c:	b0ca      	sub	sp, #296	; 0x128
 800420e:	af00      	add	r7, sp, #0
 8004210:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004214:	2300      	movs	r3, #0
 8004216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800421a:	2300      	movs	r3, #0
 800421c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800422c:	2500      	movs	r5, #0
 800422e:	ea54 0305 	orrs.w	r3, r4, r5
 8004232:	d049      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800423a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800423e:	d02f      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004240:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004244:	d828      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800424a:	d01a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800424c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004250:	d822      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425a:	d007      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800425c:	e01c      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425e:	4bb8      	ldr	r3, [pc, #736]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	4ab7      	ldr	r2, [pc, #732]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800426a:	e01a      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004270:	3308      	adds	r3, #8
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f002 fb61 	bl	800693c <RCCEx_PLL2_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004280:	e00f      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004286:	3328      	adds	r3, #40	; 0x28
 8004288:	2102      	movs	r1, #2
 800428a:	4618      	mov	r0, r3
 800428c:	f002 fc08 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004296:	e004      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800429e:	e000      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80042a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80042aa:	4ba5      	ldr	r3, [pc, #660]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b8:	4aa1      	ldr	r2, [pc, #644]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042ba:	430b      	orrs	r3, r1
 80042bc:	6513      	str	r3, [r2, #80]	; 0x50
 80042be:	e003      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80042d4:	f04f 0900 	mov.w	r9, #0
 80042d8:	ea58 0309 	orrs.w	r3, r8, r9
 80042dc:	d047      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d82a      	bhi.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80042e8:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004305 	.word	0x08004305
 80042f4:	08004313 	.word	0x08004313
 80042f8:	08004329 	.word	0x08004329
 80042fc:	08004347 	.word	0x08004347
 8004300:	08004347 	.word	0x08004347
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004304:	4b8e      	ldr	r3, [pc, #568]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	4a8d      	ldr	r2, [pc, #564]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800430a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004310:	e01a      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004316:	3308      	adds	r3, #8
 8004318:	2100      	movs	r1, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f002 fb0e 	bl	800693c <RCCEx_PLL2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004326:	e00f      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432c:	3328      	adds	r3, #40	; 0x28
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f002 fbb5 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800433c:	e004      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004344:	e000      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004350:	4b7b      	ldr	r3, [pc, #492]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004354:	f023 0107 	bic.w	r1, r3, #7
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	4a78      	ldr	r2, [pc, #480]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004360:	430b      	orrs	r3, r1
 8004362:	6513      	str	r3, [r2, #80]	; 0x50
 8004364:	e003      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800436a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800437a:	f04f 0b00 	mov.w	fp, #0
 800437e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004382:	d04c      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438e:	d030      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004394:	d829      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004396:	2bc0      	cmp	r3, #192	; 0xc0
 8004398:	d02d      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800439a:	2bc0      	cmp	r3, #192	; 0xc0
 800439c:	d825      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800439e:	2b80      	cmp	r3, #128	; 0x80
 80043a0:	d018      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	d821      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d007      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80043ae:	e01c      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b0:	4b63      	ldr	r3, [pc, #396]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	4a62      	ldr	r2, [pc, #392]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80043bc:	e01c      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c2:	3308      	adds	r3, #8
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f002 fab8 	bl	800693c <RCCEx_PLL2_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80043d2:	e011      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d8:	3328      	adds	r3, #40	; 0x28
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f002 fb5f 	bl	8006aa0 <RCCEx_PLL3_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80043e8:	e006      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043f0:	e002      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80043f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004400:	4b4f      	ldr	r3, [pc, #316]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004404:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440e:	4a4c      	ldr	r2, [pc, #304]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004410:	430b      	orrs	r3, r1
 8004412:	6513      	str	r3, [r2, #80]	; 0x50
 8004414:	e003      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800441a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800442a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800442e:	2300      	movs	r3, #0
 8004430:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004434:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d053      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004446:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800444a:	d035      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800444c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004450:	d82e      	bhi.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004452:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004456:	d031      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004458:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800445c:	d828      	bhi.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800445e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004462:	d01a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004468:	d822      	bhi.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800446e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004472:	d007      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004474:	e01c      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004476:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	4a31      	ldr	r2, [pc, #196]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800447c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004480:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004482:	e01c      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004488:	3308      	adds	r3, #8
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f002 fa55 	bl	800693c <RCCEx_PLL2_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004498:	e011      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449e:	3328      	adds	r3, #40	; 0x28
 80044a0:	2100      	movs	r1, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	f002 fafc 	bl	8006aa0 <RCCEx_PLL3_Config>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044ae:	e006      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044b6:	e002      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80044b8:	bf00      	nop
 80044ba:	e000      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80044bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80044c6:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044d6:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044d8:	430b      	orrs	r3, r1
 80044da:	6593      	str	r3, [r2, #88]	; 0x58
 80044dc:	e003      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80044f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044f6:	2300      	movs	r3, #0
 80044f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80044fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004500:	460b      	mov	r3, r1
 8004502:	4313      	orrs	r3, r2
 8004504:	d056      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800450e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004512:	d038      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004518:	d831      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800451a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800451e:	d034      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004520:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004524:	d82b      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800452a:	d01d      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800452c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004530:	d825      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800453a:	d00a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800453c:	e01f      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800453e:	bf00      	nop
 8004540:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004544:	4ba2      	ldr	r3, [pc, #648]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	4aa1      	ldr	r2, [pc, #644]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800454a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004550:	e01c      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004556:	3308      	adds	r3, #8
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f002 f9ee 	bl	800693c <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004566:	e011      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456c:	3328      	adds	r3, #40	; 0x28
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f002 fa95 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800457c:	e006      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004584:	e002      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800458a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004594:	4b8e      	ldr	r3, [pc, #568]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800459c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045a4:	4a8a      	ldr	r2, [pc, #552]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
 80045aa:	e003      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80045c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80045ce:	460b      	mov	r3, r1
 80045d0:	4313      	orrs	r3, r2
 80045d2:	d03a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045da:	2b30      	cmp	r3, #48	; 0x30
 80045dc:	d01f      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80045de:	2b30      	cmp	r3, #48	; 0x30
 80045e0:	d819      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d00c      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d815      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d019      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d111      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f2:	4b77      	ldr	r3, [pc, #476]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	4a76      	ldr	r2, [pc, #472]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80045fe:	e011      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004604:	3308      	adds	r3, #8
 8004606:	2102      	movs	r1, #2
 8004608:	4618      	mov	r0, r3
 800460a:	f002 f997 	bl	800693c <RCCEx_PLL2_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004614:	e006      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800461c:	e002      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800461e:	bf00      	nop
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004624:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800462c:	4b68      	ldr	r3, [pc, #416]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800462e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004630:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	4a65      	ldr	r2, [pc, #404]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800463c:	430b      	orrs	r3, r1
 800463e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004640:	e003      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004656:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004660:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004664:	460b      	mov	r3, r1
 8004666:	4313      	orrs	r3, r2
 8004668:	d051      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004674:	d035      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467a:	d82e      	bhi.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800467c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004680:	d031      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004682:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004686:	d828      	bhi.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468c:	d01a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800468e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004692:	d822      	bhi.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469c:	d007      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800469e:	e01c      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046ac:	e01c      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b2:	3308      	adds	r3, #8
 80046b4:	2100      	movs	r1, #0
 80046b6:	4618      	mov	r0, r3
 80046b8:	f002 f940 	bl	800693c <RCCEx_PLL2_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046c2:	e011      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c8:	3328      	adds	r3, #40	; 0x28
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f002 f9e7 	bl	8006aa0 <RCCEx_PLL3_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046d8:	e006      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046e0:	e002      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80046e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80046f0:	4b37      	ldr	r3, [pc, #220]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fe:	4a34      	ldr	r2, [pc, #208]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004700:	430b      	orrs	r3, r1
 8004702:	6513      	str	r3, [r2, #80]	; 0x50
 8004704:	e003      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800470a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800471a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004724:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004728:	460b      	mov	r3, r1
 800472a:	4313      	orrs	r3, r2
 800472c:	d056      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004738:	d033      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800473a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800473e:	d82c      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004740:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004744:	d02f      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004746:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800474a:	d826      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800474c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004750:	d02b      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004752:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004756:	d820      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800475c:	d012      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800475e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004762:	d81a      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d022      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d115      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004772:	3308      	adds	r3, #8
 8004774:	2101      	movs	r1, #1
 8004776:	4618      	mov	r0, r3
 8004778:	f002 f8e0 	bl	800693c <RCCEx_PLL2_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004782:	e015      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004788:	3328      	adds	r3, #40	; 0x28
 800478a:	2101      	movs	r1, #1
 800478c:	4618      	mov	r0, r3
 800478e:	f002 f987 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004798:	e00a      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047a0:	e006      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047a2:	bf00      	nop
 80047a4:	e004      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047a6:	bf00      	nop
 80047a8:	e002      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047aa:	bf00      	nop
 80047ac:	e000      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10d      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047bc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c6:	4a02      	ldr	r2, [pc, #8]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6513      	str	r3, [r2, #80]	; 0x50
 80047cc:	e006      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80047ce:	bf00      	nop
 80047d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80047e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4313      	orrs	r3, r2
 80047fa:	d055      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004808:	d033      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800480a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800480e:	d82c      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004814:	d02f      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481a:	d826      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800481c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004820:	d02b      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004822:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004826:	d820      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800482c:	d012      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800482e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004832:	d81a      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d022      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800483c:	d115      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004842:	3308      	adds	r3, #8
 8004844:	2101      	movs	r1, #1
 8004846:	4618      	mov	r0, r3
 8004848:	f002 f878 	bl	800693c <RCCEx_PLL2_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004852:	e015      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004858:	3328      	adds	r3, #40	; 0x28
 800485a:	2101      	movs	r1, #1
 800485c:	4618      	mov	r0, r3
 800485e:	f002 f91f 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004868:	e00a      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004870:	e006      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004872:	bf00      	nop
 8004874:	e004      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004876:	bf00      	nop
 8004878:	e002      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800487e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004888:	4ba3      	ldr	r3, [pc, #652]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004894:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004898:	4a9f      	ldr	r2, [pc, #636]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800489a:	430b      	orrs	r3, r1
 800489c:	6593      	str	r3, [r2, #88]	; 0x58
 800489e:	e003      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80048b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048b8:	2300      	movs	r3, #0
 80048ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d037      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048d2:	d00e      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80048d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048d8:	d816      	bhi.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d018      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80048de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048e2:	d111      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e4:	4b8c      	ldr	r3, [pc, #560]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	4a8b      	ldr	r2, [pc, #556]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80048f0:	e00f      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f6:	3308      	adds	r3, #8
 80048f8:	2101      	movs	r1, #1
 80048fa:	4618      	mov	r0, r3
 80048fc:	f002 f81e 	bl	800693c <RCCEx_PLL2_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004906:	e004      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800490e:	e000      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10a      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800491a:	4b7f      	ldr	r3, [pc, #508]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	4a7b      	ldr	r2, [pc, #492]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800492a:	430b      	orrs	r3, r1
 800492c:	6513      	str	r3, [r2, #80]	; 0x50
 800492e:	e003      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004934:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800494e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	d039      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	2b03      	cmp	r3, #3
 8004960:	d81c      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004962:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	080049a5 	.word	0x080049a5
 800496c:	08004979 	.word	0x08004979
 8004970:	08004987 	.word	0x08004987
 8004974:	080049a5 	.word	0x080049a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004978:	4b67      	ldr	r3, [pc, #412]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	4a66      	ldr	r2, [pc, #408]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800497e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004984:	e00f      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498a:	3308      	adds	r3, #8
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f001 ffd4 	bl	800693c <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800499a:	e004      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049a2:	e000      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80049a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049ae:	4b5a      	ldr	r3, [pc, #360]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	f023 0103 	bic.w	r1, r3, #3
 80049b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	4a56      	ldr	r2, [pc, #344]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049be:	430b      	orrs	r3, r1
 80049c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049c2:	e003      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80049d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80049e6:	460b      	mov	r3, r1
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f000 809f 	beq.w	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ee:	4b4b      	ldr	r3, [pc, #300]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a4a      	ldr	r2, [pc, #296]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80049f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049fa:	f7fd f857 	bl	8001aac <HAL_GetTick>
 80049fe:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a02:	e00b      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a04:	f7fd f852 	bl	8001aac <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b64      	cmp	r3, #100	; 0x64
 8004a12:	d903      	bls.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a1a:	e005      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a1c:	4b3f      	ldr	r3, [pc, #252]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ed      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d179      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a30:	4b39      	ldr	r3, [pc, #228]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a3c:	4053      	eors	r3, r2
 8004a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d015      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a46:	4b34      	ldr	r3, [pc, #208]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a52:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a30      	ldr	r2, [pc, #192]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a5e:	4b2e      	ldr	r3, [pc, #184]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	4a2d      	ldr	r2, [pc, #180]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a6a:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7e:	d118      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fd f814 	bl	8001aac <HAL_GetTick>
 8004a84:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a88:	e00d      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fd f80f 	bl	8001aac <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a94:	1ad2      	subs	r2, r2, r3
 8004a96:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d903      	bls.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004aa4:	e005      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aa6:	4b1c      	ldr	r3, [pc, #112]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0eb      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d129      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aca:	d10e      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004acc:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004adc:	091a      	lsrs	r2, r3, #4
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	4a0d      	ldr	r2, [pc, #52]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6113      	str	r3, [r2, #16]
 8004ae8:	e005      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004af0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004af4:	6113      	str	r3, [r2, #16]
 8004af6:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004af8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b06:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0c:	e00e      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004b16:	e009      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004b18:	58024400 	.word	0x58024400
 8004b1c:	58024800 	.word	0x58024800
 8004b20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	f002 0301 	and.w	r3, r2, #1
 8004b38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f000 8089 	beq.w	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b54:	2b28      	cmp	r3, #40	; 0x28
 8004b56:	d86b      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004b58:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004c39 	.word	0x08004c39
 8004b64:	08004c31 	.word	0x08004c31
 8004b68:	08004c31 	.word	0x08004c31
 8004b6c:	08004c31 	.word	0x08004c31
 8004b70:	08004c31 	.word	0x08004c31
 8004b74:	08004c31 	.word	0x08004c31
 8004b78:	08004c31 	.word	0x08004c31
 8004b7c:	08004c31 	.word	0x08004c31
 8004b80:	08004c05 	.word	0x08004c05
 8004b84:	08004c31 	.word	0x08004c31
 8004b88:	08004c31 	.word	0x08004c31
 8004b8c:	08004c31 	.word	0x08004c31
 8004b90:	08004c31 	.word	0x08004c31
 8004b94:	08004c31 	.word	0x08004c31
 8004b98:	08004c31 	.word	0x08004c31
 8004b9c:	08004c31 	.word	0x08004c31
 8004ba0:	08004c1b 	.word	0x08004c1b
 8004ba4:	08004c31 	.word	0x08004c31
 8004ba8:	08004c31 	.word	0x08004c31
 8004bac:	08004c31 	.word	0x08004c31
 8004bb0:	08004c31 	.word	0x08004c31
 8004bb4:	08004c31 	.word	0x08004c31
 8004bb8:	08004c31 	.word	0x08004c31
 8004bbc:	08004c31 	.word	0x08004c31
 8004bc0:	08004c39 	.word	0x08004c39
 8004bc4:	08004c31 	.word	0x08004c31
 8004bc8:	08004c31 	.word	0x08004c31
 8004bcc:	08004c31 	.word	0x08004c31
 8004bd0:	08004c31 	.word	0x08004c31
 8004bd4:	08004c31 	.word	0x08004c31
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c31 	.word	0x08004c31
 8004be0:	08004c39 	.word	0x08004c39
 8004be4:	08004c31 	.word	0x08004c31
 8004be8:	08004c31 	.word	0x08004c31
 8004bec:	08004c31 	.word	0x08004c31
 8004bf0:	08004c31 	.word	0x08004c31
 8004bf4:	08004c31 	.word	0x08004c31
 8004bf8:	08004c31 	.word	0x08004c31
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c39 	.word	0x08004c39
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c08:	3308      	adds	r3, #8
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fe95 	bl	800693c <RCCEx_PLL2_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c18:	e00f      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1e:	3328      	adds	r3, #40	; 0x28
 8004c20:	2101      	movs	r1, #1
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 ff3c 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c2e:	e004      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c36:	e000      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c42:	4bbf      	ldr	r3, [pc, #764]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c50:	4abb      	ldr	r2, [pc, #748]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c52:	430b      	orrs	r3, r1
 8004c54:	6553      	str	r3, [r2, #84]	; 0x54
 8004c56:	e003      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c68:	f002 0302 	and.w	r3, r2, #2
 8004c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c70:	2300      	movs	r3, #0
 8004c72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	d041      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d824      	bhi.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004cdd 	.word	0x08004cdd
 8004c94:	08004ca9 	.word	0x08004ca9
 8004c98:	08004cbf 	.word	0x08004cbf
 8004c9c:	08004cdd 	.word	0x08004cdd
 8004ca0:	08004cdd 	.word	0x08004cdd
 8004ca4:	08004cdd 	.word	0x08004cdd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cac:	3308      	adds	r3, #8
 8004cae:	2101      	movs	r1, #1
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 fe43 	bl	800693c <RCCEx_PLL2_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004cbc:	e00f      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc2:	3328      	adds	r3, #40	; 0x28
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f001 feea 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004cd2:	e004      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cda:	e000      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ce6:	4b96      	ldr	r3, [pc, #600]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	f023 0107 	bic.w	r1, r3, #7
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf4:	4a92      	ldr	r2, [pc, #584]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	6553      	str	r3, [r2, #84]	; 0x54
 8004cfa:	e003      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f002 0304 	and.w	r3, r2, #4
 8004d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d14:	2300      	movs	r3, #0
 8004d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4313      	orrs	r3, r2
 8004d22:	d044      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2c:	2b05      	cmp	r3, #5
 8004d2e:	d825      	bhi.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d85 	.word	0x08004d85
 8004d3c:	08004d51 	.word	0x08004d51
 8004d40:	08004d67 	.word	0x08004d67
 8004d44:	08004d85 	.word	0x08004d85
 8004d48:	08004d85 	.word	0x08004d85
 8004d4c:	08004d85 	.word	0x08004d85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d54:	3308      	adds	r3, #8
 8004d56:	2101      	movs	r1, #1
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f001 fdef 	bl	800693c <RCCEx_PLL2_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d64:	e00f      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6a:	3328      	adds	r3, #40	; 0x28
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f001 fe96 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d7a:	e004      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d82:	e000      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d8e:	4b6c      	ldr	r3, [pc, #432]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d92:	f023 0107 	bic.w	r1, r3, #7
 8004d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9e:	4a68      	ldr	r2, [pc, #416]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004da0:	430b      	orrs	r3, r1
 8004da2:	6593      	str	r3, [r2, #88]	; 0x58
 8004da4:	e003      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004daa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f002 0320 	and.w	r3, r2, #32
 8004dba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	d055      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dda:	d033      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de0:	d82c      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de6:	d02f      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dec:	d826      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004dee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004df2:	d02b      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004df4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004df8:	d820      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfe:	d012      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e04:	d81a      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d022      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e0e:	d115      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e14:	3308      	adds	r3, #8
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f001 fd8f 	bl	800693c <RCCEx_PLL2_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e24:	e015      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2a:	3328      	adds	r3, #40	; 0x28
 8004e2c:	2102      	movs	r1, #2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 fe36 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e42:	e006      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e44:	bf00      	nop
 8004e46:	e004      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e48:	bf00      	nop
 8004e4a:	e002      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e5a:	4b39      	ldr	r3, [pc, #228]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6a:	4a35      	ldr	r2, [pc, #212]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6553      	str	r3, [r2, #84]	; 0x54
 8004e70:	e003      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4313      	orrs	r3, r2
 8004e98:	d058      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ea2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ea6:	d033      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004ea8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004eac:	d82c      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	d02f      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb8:	d826      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004eba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ebe:	d02b      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004ec0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec4:	d820      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eca:	d012      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed0:	d81a      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d022      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eda:	d115      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 fd29 	bl	800693c <RCCEx_PLL2_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ef0:	e015      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef6:	3328      	adds	r3, #40	; 0x28
 8004ef8:	2102      	movs	r1, #2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 fdd0 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f06:	e00a      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f0e:	e006      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f10:	bf00      	nop
 8004f12:	e004      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f14:	bf00      	nop
 8004f16:	e002      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f18:	bf00      	nop
 8004f1a:	e000      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10e      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f36:	4a02      	ldr	r2, [pc, #8]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f3c:	e006      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004f3e:	bf00      	nop
 8004f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f62:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d055      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f78:	d033      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004f7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f7e:	d82c      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f84:	d02f      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8a:	d826      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f90:	d02b      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004f92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f96:	d820      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f9c:	d012      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa2:	d81a      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d022      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fac:	d115      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 fcc0 	bl	800693c <RCCEx_PLL2_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004fc2:	e015      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc8:	3328      	adds	r3, #40	; 0x28
 8004fca:	2102      	movs	r1, #2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 fd67 	bl	8006aa0 <RCCEx_PLL3_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fe0:	e006      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004fe2:	bf00      	nop
 8004fe4:	e004      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004fe6:	bf00      	nop
 8004fe8:	e002      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004fea:	bf00      	nop
 8004fec:	e000      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10b      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ff8:	4ba1      	ldr	r3, [pc, #644]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005004:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005008:	4a9d      	ldr	r2, [pc, #628]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800500a:	430b      	orrs	r3, r1
 800500c:	6593      	str	r3, [r2, #88]	; 0x58
 800500e:	e003      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005014:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f002 0308 	and.w	r3, r2, #8
 8005024:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800502e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005032:	460b      	mov	r3, r1
 8005034:	4313      	orrs	r3, r2
 8005036:	d01e      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800503c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d10c      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504a:	3328      	adds	r3, #40	; 0x28
 800504c:	2102      	movs	r1, #2
 800504e:	4618      	mov	r0, r3
 8005050:	f001 fd26 	bl	8006aa0 <RCCEx_PLL3_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005060:	4b87      	ldr	r3, [pc, #540]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005064:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005070:	4a83      	ldr	r2, [pc, #524]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005072:	430b      	orrs	r3, r1
 8005074:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f002 0310 	and.w	r3, r2, #16
 8005082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005086:	2300      	movs	r3, #0
 8005088:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800508c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005090:	460b      	mov	r3, r1
 8005092:	4313      	orrs	r3, r2
 8005094:	d01e      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a2:	d10c      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a8:	3328      	adds	r3, #40	; 0x28
 80050aa:	2102      	movs	r1, #2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f001 fcf7 	bl	8006aa0 <RCCEx_PLL3_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050be:	4b70      	ldr	r3, [pc, #448]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ce:	4a6c      	ldr	r2, [pc, #432]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80050e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80050ee:	460b      	mov	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	d03e      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80050f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005100:	d022      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005106:	d81b      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800510c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005110:	d00b      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005112:	e015      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005118:	3308      	adds	r3, #8
 800511a:	2100      	movs	r1, #0
 800511c:	4618      	mov	r0, r3
 800511e:	f001 fc0d 	bl	800693c <RCCEx_PLL2_Config>
 8005122:	4603      	mov	r3, r0
 8005124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005128:	e00f      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800512a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512e:	3328      	adds	r3, #40	; 0x28
 8005130:	2102      	movs	r1, #2
 8005132:	4618      	mov	r0, r3
 8005134:	f001 fcb4 	bl	8006aa0 <RCCEx_PLL3_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800513e:	e004      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005146:	e000      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005152:	4b4b      	ldr	r3, [pc, #300]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005162:	4a47      	ldr	r2, [pc, #284]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005164:	430b      	orrs	r3, r1
 8005166:	6593      	str	r3, [r2, #88]	; 0x58
 8005168:	e003      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800516e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800517e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005180:	2300      	movs	r3, #0
 8005182:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005184:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005188:	460b      	mov	r3, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	d03b      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005196:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800519a:	d01f      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800519c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051a0:	d818      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a6:	d003      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80051a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ac:	d007      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80051ae:	e011      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b0:	4b33      	ldr	r3, [pc, #204]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4a32      	ldr	r2, [pc, #200]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80051bc:	e00f      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c2:	3328      	adds	r3, #40	; 0x28
 80051c4:	2101      	movs	r1, #1
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fc6a 	bl	8006aa0 <RCCEx_PLL3_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80051d2:	e004      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051da:	e000      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80051dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051e6:	4b26      	ldr	r3, [pc, #152]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	4a22      	ldr	r2, [pc, #136]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6553      	str	r3, [r2, #84]	; 0x54
 80051fc:	e003      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005202:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005212:	673b      	str	r3, [r7, #112]	; 0x70
 8005214:	2300      	movs	r3, #0
 8005216:	677b      	str	r3, [r7, #116]	; 0x74
 8005218:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800521c:	460b      	mov	r3, r1
 800521e:	4313      	orrs	r3, r2
 8005220:	d034      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800522c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005230:	d007      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005232:	e011      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005234:	4b12      	ldr	r3, [pc, #72]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	4a11      	ldr	r2, [pc, #68]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800523a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005240:	e00e      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005246:	3308      	adds	r3, #8
 8005248:	2102      	movs	r1, #2
 800524a:	4618      	mov	r0, r3
 800524c:	f001 fb76 	bl	800693c <RCCEx_PLL2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005256:	e003      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800525e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10d      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800526a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005276:	4a02      	ldr	r2, [pc, #8]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005278:	430b      	orrs	r3, r1
 800527a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800527c:	e006      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800527e:	bf00      	nop
 8005280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005284:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005288:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800528c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005298:	66bb      	str	r3, [r7, #104]	; 0x68
 800529a:	2300      	movs	r3, #0
 800529c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800529e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80052a2:	460b      	mov	r3, r1
 80052a4:	4313      	orrs	r3, r2
 80052a6:	d00c      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ac:	3328      	adds	r3, #40	; 0x28
 80052ae:	2102      	movs	r1, #2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f001 fbf5 	bl	8006aa0 <RCCEx_PLL3_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80052ce:	663b      	str	r3, [r7, #96]	; 0x60
 80052d0:	2300      	movs	r3, #0
 80052d2:	667b      	str	r3, [r7, #100]	; 0x64
 80052d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80052d8:	460b      	mov	r3, r1
 80052da:	4313      	orrs	r3, r2
 80052dc:	d038      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ea:	d018      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80052ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f0:	d811      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80052f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f6:	d014      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80052f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052fc:	d80b      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d011      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005306:	d106      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005308:	4bc3      	ldr	r3, [pc, #780]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4ac2      	ldr	r2, [pc, #776]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800530e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005314:	e008      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800531c:	e004      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800531e:	bf00      	nop
 8005320:	e002      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005330:	4bb9      	ldr	r3, [pc, #740]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005340:	4ab5      	ldr	r2, [pc, #724]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005342:	430b      	orrs	r3, r1
 8005344:	6553      	str	r3, [r2, #84]	; 0x54
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800534c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800535c:	65bb      	str	r3, [r7, #88]	; 0x58
 800535e:	2300      	movs	r3, #0
 8005360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005362:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005366:	460b      	mov	r3, r1
 8005368:	4313      	orrs	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800536c:	4baa      	ldr	r3, [pc, #680]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800536e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005370:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537a:	4aa7      	ldr	r2, [pc, #668]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800537c:	430b      	orrs	r3, r1
 800537e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800538c:	653b      	str	r3, [r7, #80]	; 0x50
 800538e:	2300      	movs	r3, #0
 8005390:	657b      	str	r3, [r7, #84]	; 0x54
 8005392:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005396:	460b      	mov	r3, r1
 8005398:	4313      	orrs	r3, r2
 800539a:	d00a      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800539c:	4b9e      	ldr	r3, [pc, #632]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053ac:	4a9a      	ldr	r2, [pc, #616]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ae:	430b      	orrs	r3, r1
 80053b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80053be:	64bb      	str	r3, [r7, #72]	; 0x48
 80053c0:	2300      	movs	r3, #0
 80053c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80053c8:	460b      	mov	r3, r1
 80053ca:	4313      	orrs	r3, r2
 80053cc:	d009      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053ce:	4b92      	ldr	r3, [pc, #584]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053dc:	4a8e      	ldr	r2, [pc, #568]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053de:	430b      	orrs	r3, r1
 80053e0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80053ee:	643b      	str	r3, [r7, #64]	; 0x40
 80053f0:	2300      	movs	r3, #0
 80053f2:	647b      	str	r3, [r7, #68]	; 0x44
 80053f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80053f8:	460b      	mov	r3, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d00e      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053fe:	4b86      	ldr	r3, [pc, #536]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	4a85      	ldr	r2, [pc, #532]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005404:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005408:	6113      	str	r3, [r2, #16]
 800540a:	4b83      	ldr	r3, [pc, #524]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800540c:	6919      	ldr	r1, [r3, #16]
 800540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005412:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005416:	4a80      	ldr	r2, [pc, #512]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005418:	430b      	orrs	r3, r1
 800541a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800541c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38
 800542a:	2300      	movs	r3, #0
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800542e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005432:	460b      	mov	r3, r1
 8005434:	4313      	orrs	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005438:	4b77      	ldr	r3, [pc, #476]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800543a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	4a74      	ldr	r2, [pc, #464]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005448:	430b      	orrs	r3, r1
 800544a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800544c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005458:	633b      	str	r3, [r7, #48]	; 0x30
 800545a:	2300      	movs	r3, #0
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
 800545e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005462:	460b      	mov	r3, r1
 8005464:	4313      	orrs	r3, r2
 8005466:	d00a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005468:	4b6b      	ldr	r3, [pc, #428]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005478:	4a67      	ldr	r2, [pc, #412]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800547a:	430b      	orrs	r3, r1
 800547c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	2100      	movs	r1, #0
 8005488:	62b9      	str	r1, [r7, #40]	; 0x28
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005490:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005494:	460b      	mov	r3, r1
 8005496:	4313      	orrs	r3, r2
 8005498:	d011      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800549a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800549e:	3308      	adds	r3, #8
 80054a0:	2100      	movs	r1, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 fa4a 	bl	800693c <RCCEx_PLL2_Config>
 80054a8:	4603      	mov	r3, r0
 80054aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80054ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	2100      	movs	r1, #0
 80054c8:	6239      	str	r1, [r7, #32]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
 80054d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054d4:	460b      	mov	r3, r1
 80054d6:	4313      	orrs	r3, r2
 80054d8:	d011      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054de:	3308      	adds	r3, #8
 80054e0:	2101      	movs	r1, #1
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 fa2a 	bl	800693c <RCCEx_PLL2_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80054ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	2100      	movs	r1, #0
 8005508:	61b9      	str	r1, [r7, #24]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005514:	460b      	mov	r3, r1
 8005516:	4313      	orrs	r3, r2
 8005518:	d011      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551e:	3308      	adds	r3, #8
 8005520:	2102      	movs	r1, #2
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fa0a 	bl	800693c <RCCEx_PLL2_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800552e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800553a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	2100      	movs	r1, #0
 8005548:	6139      	str	r1, [r7, #16]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005554:	460b      	mov	r3, r1
 8005556:	4313      	orrs	r3, r2
 8005558:	d011      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800555a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555e:	3328      	adds	r3, #40	; 0x28
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f001 fa9c 	bl	8006aa0 <RCCEx_PLL3_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800556e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800557a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800557e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	2100      	movs	r1, #0
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d011      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559e:	3328      	adds	r3, #40	; 0x28
 80055a0:	2101      	movs	r1, #1
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 fa7c 	bl	8006aa0 <RCCEx_PLL3_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80055ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	2100      	movs	r1, #0
 80055c8:	6039      	str	r1, [r7, #0]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	607b      	str	r3, [r7, #4]
 80055d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80055d4:	460b      	mov	r3, r1
 80055d6:	4313      	orrs	r3, r2
 80055d8:	d011      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055de:	3328      	adds	r3, #40	; 0x28
 80055e0:	2102      	movs	r1, #2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f001 fa5c 	bl	8006aa0 <RCCEx_PLL3_Config>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80055ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80055fe:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e000      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
}
 800560c:	4618      	mov	r0, r3
 800560e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005612:	46bd      	mov	sp, r7
 8005614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005618:	58024400 	.word	0x58024400

0800561c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b090      	sub	sp, #64	; 0x40
 8005620:	af00      	add	r7, sp, #0
 8005622:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800562a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800562e:	430b      	orrs	r3, r1
 8005630:	f040 8094 	bne.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005634:	4b9e      	ldr	r3, [pc, #632]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	2b04      	cmp	r3, #4
 8005642:	f200 8087 	bhi.w	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005661 	.word	0x08005661
 8005650:	08005689 	.word	0x08005689
 8005654:	080056b1 	.word	0x080056b1
 8005658:	0800574d 	.word	0x0800574d
 800565c:	080056d9 	.word	0x080056d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005660:	4b93      	ldr	r3, [pc, #588]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800566c:	d108      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800566e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f810 	bl	8006698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800567c:	f000 bd45 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005684:	f000 bd41 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005688:	4b89      	ldr	r3, [pc, #548]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005694:	d108      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005696:	f107 0318 	add.w	r3, r7, #24
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fd54 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056a4:	f000 bd31 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ac:	f000 bd2d 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056b0:	4b7f      	ldr	r3, [pc, #508]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056bc:	d108      	bne.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056be:	f107 030c 	add.w	r3, r7, #12
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fe94 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056cc:	f000 bd1d 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d4:	f000 bd19 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056d8:	4b75      	ldr	r3, [pc, #468]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056e2:	4b73      	ldr	r3, [pc, #460]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d10c      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80056ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056f4:	4b6e      	ldr	r3, [pc, #440]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	08db      	lsrs	r3, r3, #3
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	4a6d      	ldr	r2, [pc, #436]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
 8005704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005706:	e01f      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005708:	4b69      	ldr	r3, [pc, #420]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005714:	d106      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005718:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800571c:	d102      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800571e:	4b66      	ldr	r3, [pc, #408]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005722:	e011      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005724:	4b62      	ldr	r3, [pc, #392]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005730:	d106      	bne.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005738:	d102      	bne.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800573a:	4b60      	ldr	r3, [pc, #384]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573e:	e003      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005744:	f000 bce1 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005748:	f000 bcdf 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800574c:	4b5c      	ldr	r3, [pc, #368]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005750:	f000 bcdb 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005758:	f000 bcd7 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800575c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005760:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005764:	430b      	orrs	r3, r1
 8005766:	f040 80ad 	bne.w	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800576a:	4b51      	ldr	r3, [pc, #324]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800576c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005772:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577a:	d056      	beq.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005782:	f200 8090 	bhi.w	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	2bc0      	cmp	r3, #192	; 0xc0
 800578a:	f000 8088 	beq.w	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	2bc0      	cmp	r3, #192	; 0xc0
 8005792:	f200 8088 	bhi.w	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	2b80      	cmp	r3, #128	; 0x80
 800579a:	d032      	beq.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	2b80      	cmp	r3, #128	; 0x80
 80057a0:	f200 8081 	bhi.w	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d014      	beq.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80057b0:	e079      	b.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057b2:	4b3f      	ldr	r3, [pc, #252]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057be:	d108      	bne.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 ff67 	bl	8006698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ce:	f000 bc9c 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d6:	f000 bc98 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057da:	4b35      	ldr	r3, [pc, #212]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e6:	d108      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057e8:	f107 0318 	add.w	r3, r7, #24
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fcab 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057f6:	f000 bc88 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057fe:	f000 bc84 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005802:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800580a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800580e:	d108      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005810:	f107 030c 	add.w	r3, r7, #12
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fdeb 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800581e:	f000 bc74 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005826:	f000 bc70 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800582a:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005832:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005834:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d10c      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	08db      	lsrs	r3, r3, #3
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	4a18      	ldr	r2, [pc, #96]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005852:	fa22 f303 	lsr.w	r3, r2, r3
 8005856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005858:	e01f      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800585a:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005866:	d106      	bne.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800586e:	d102      	bne.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005874:	e011      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005876:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005882:	d106      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800588a:	d102      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800588c:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005890:	e003      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005896:	f000 bc38 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800589a:	f000 bc36 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800589e:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a2:	f000 bc32 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058aa:	f000 bc2e 	b.w	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80058ae:	bf00      	nop
 80058b0:	58024400 	.word	0x58024400
 80058b4:	03d09000 	.word	0x03d09000
 80058b8:	003d0900 	.word	0x003d0900
 80058bc:	017d7840 	.word	0x017d7840
 80058c0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80058c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80058cc:	430b      	orrs	r3, r1
 80058ce:	f040 809c 	bne.w	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80058d2:	4b9e      	ldr	r3, [pc, #632]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80058da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058e2:	d054      	beq.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058ea:	f200 808b 	bhi.w	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058f4:	f000 8083 	beq.w	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058fe:	f200 8081 	bhi.w	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005908:	d02f      	beq.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005910:	d878      	bhi.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800591e:	d012      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005920:	e070      	b.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005922:	4b8a      	ldr	r3, [pc, #552]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800592e:	d107      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005934:	4618      	mov	r0, r3
 8005936:	f000 feaf 	bl	8006698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800593e:	e3e4      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005944:	e3e1      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005946:	4b81      	ldr	r3, [pc, #516]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800594e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005952:	d107      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005954:	f107 0318 	add.w	r3, r7, #24
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fbf5 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005962:	e3d2      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005968:	e3cf      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800596a:	4b78      	ldr	r3, [pc, #480]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005976:	d107      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005978:	f107 030c 	add.w	r3, r7, #12
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fd37 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005986:	e3c0      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800598c:	e3bd      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800598e:	4b6f      	ldr	r3, [pc, #444]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005992:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005996:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005998:	4b6c      	ldr	r3, [pc, #432]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d10c      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059aa:	4b68      	ldr	r3, [pc, #416]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	08db      	lsrs	r3, r3, #3
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	4a66      	ldr	r2, [pc, #408]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80059b6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059bc:	e01e      	b.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059be:	4b63      	ldr	r3, [pc, #396]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ca:	d106      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80059cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d2:	d102      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059d4:	4b5f      	ldr	r3, [pc, #380]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d8:	e010      	b.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059da:	4b5c      	ldr	r3, [pc, #368]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059e6:	d106      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ee:	d102      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059f0:	4b59      	ldr	r3, [pc, #356]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80059f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f4:	e002      	b.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80059fa:	e386      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059fc:	e385      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059fe:	4b57      	ldr	r3, [pc, #348]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a02:	e382      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a08:	e37f      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a0e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005a12:	430b      	orrs	r3, r1
 8005a14:	f040 80a7 	bne.w	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005a18:	4b4c      	ldr	r3, [pc, #304]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a28:	d055      	beq.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a30:	f200 8096 	bhi.w	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a3a:	f000 8084 	beq.w	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a44:	f200 808c 	bhi.w	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a4e:	d030      	beq.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a56:	f200 8083 	bhi.w	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a66:	d012      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005a68:	e07a      	b.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a6a:	4b38      	ldr	r3, [pc, #224]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a76:	d107      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fe0b 	bl	8006698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a86:	e340      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a8c:	e33d      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a8e:	4b2f      	ldr	r3, [pc, #188]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9a:	d107      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a9c:	f107 0318 	add.w	r3, r7, #24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fb51 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aaa:	e32e      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ab0:	e32b      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ab2:	4b26      	ldr	r3, [pc, #152]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005abe:	d107      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ac0:	f107 030c 	add.w	r3, r7, #12
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fc93 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ace:	e31c      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ad4:	e319      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ad6:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d10c      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d109      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005af2:	4b16      	ldr	r3, [pc, #88]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	4a14      	ldr	r2, [pc, #80]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b04:	e01e      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b06:	4b11      	ldr	r3, [pc, #68]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b12:	d106      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b1a:	d102      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b20:	e010      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b22:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b2e:	d106      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b36:	d102      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b38:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b3c:	e002      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005b42:	e2e2      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b44:	e2e1      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b4a:	e2de      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	03d09000 	.word	0x03d09000
 8005b54:	003d0900 	.word	0x003d0900
 8005b58:	017d7840 	.word	0x017d7840
 8005b5c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b64:	e2d1      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b6a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	f040 809c 	bne.w	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005b74:	4b93      	ldr	r3, [pc, #588]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005b7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b84:	d054      	beq.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b8c:	f200 808b 	bhi.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b96:	f000 8083 	beq.w	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ba0:	f200 8081 	bhi.w	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005baa:	d02f      	beq.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb2:	d878      	bhi.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d004      	beq.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc0:	d012      	beq.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005bc2:	e070      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bc4:	4b7f      	ldr	r3, [pc, #508]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bd0:	d107      	bne.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fd5e 	bl	8006698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005be0:	e293      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be6:	e290      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005be8:	4b76      	ldr	r3, [pc, #472]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bf4:	d107      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bf6:	f107 0318 	add.w	r3, r7, #24
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 faa4 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c04:	e281      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c0a:	e27e      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c0c:	4b6d      	ldr	r3, [pc, #436]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c18:	d107      	bne.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c1a:	f107 030c 	add.w	r3, r7, #12
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fbe6 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c28:	e26f      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c2e:	e26c      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c30:	4b64      	ldr	r3, [pc, #400]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c3a:	4b62      	ldr	r3, [pc, #392]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d10c      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d109      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c4c:	4b5d      	ldr	r3, [pc, #372]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	08db      	lsrs	r3, r3, #3
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	4a5c      	ldr	r2, [pc, #368]	; (8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c5e:	e01e      	b.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c60:	4b58      	ldr	r3, [pc, #352]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c6c:	d106      	bne.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c74:	d102      	bne.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c76:	4b55      	ldr	r3, [pc, #340]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7a:	e010      	b.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c7c:	4b51      	ldr	r3, [pc, #324]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c88:	d106      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c90:	d102      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c92:	4b4f      	ldr	r3, [pc, #316]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c96:	e002      	b.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005c9c:	e235      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c9e:	e234      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ca0:	4b4c      	ldr	r3, [pc, #304]	; (8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ca4:	e231      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005caa:	e22e      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	f040 808f 	bne.w	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005cba:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cbe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005cc2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cca:	d06b      	beq.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cd2:	d874      	bhi.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cda:	d056      	beq.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ce2:	d86c      	bhi.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cea:	d03b      	beq.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cf2:	d864      	bhi.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cfa:	d021      	beq.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d02:	d85c      	bhi.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d004      	beq.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005d12:	e054      	b.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005d14:	f7fe fa4c 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8005d18:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d1a:	e1f6      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d1c:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d28:	d107      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d2a:	f107 0318 	add.w	r3, r7, #24
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fa0a 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d38:	e1e7      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d3e:	e1e4      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d40:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d4e:	f107 030c 	add.w	r3, r7, #12
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fb4c 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d5c:	e1d5      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d62:	e1d2      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d64:	4b17      	ldr	r3, [pc, #92]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d109      	bne.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d70:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	08db      	lsrs	r3, r3, #3
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d82:	e1c2      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d88:	e1bf      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005d8a:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d96:	d102      	bne.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d9c:	e1b5      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da2:	e1b2      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005da4:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005db0:	d102      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005db2:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005db6:	e1a8      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dbc:	e1a5      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dc2:	e1a2      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005dc4:	58024400 	.word	0x58024400
 8005dc8:	03d09000 	.word	0x03d09000
 8005dcc:	003d0900 	.word	0x003d0900
 8005dd0:	017d7840 	.word	0x017d7840
 8005dd4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ddc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005de0:	430b      	orrs	r3, r1
 8005de2:	d173      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005de4:	4b9c      	ldr	r3, [pc, #624]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df4:	d02f      	beq.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dfc:	d863      	bhi.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0a:	d012      	beq.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005e0c:	e05b      	b.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e0e:	4b92      	ldr	r3, [pc, #584]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e1a:	d107      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e1c:	f107 0318 	add.w	r3, r7, #24
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 f991 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e2a:	e16e      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e30:	e16b      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e32:	4b89      	ldr	r3, [pc, #548]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e3e:	d107      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e40:	f107 030c 	add.w	r3, r7, #12
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fad3 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e4e:	e15c      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e54:	e159      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e56:	4b80      	ldr	r3, [pc, #512]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e60:	4b7d      	ldr	r3, [pc, #500]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d10c      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d109      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e72:	4b79      	ldr	r3, [pc, #484]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	08db      	lsrs	r3, r3, #3
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	4a77      	ldr	r2, [pc, #476]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e84:	e01e      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e86:	4b74      	ldr	r3, [pc, #464]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e92:	d106      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e9a:	d102      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e9c:	4b70      	ldr	r3, [pc, #448]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea0:	e010      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ea2:	4b6d      	ldr	r3, [pc, #436]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eae:	d106      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eb6:	d102      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005eb8:	4b6a      	ldr	r3, [pc, #424]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005ec2:	e122      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ec4:	e121      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eca:	e11e      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	d133      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005ed8:	4b5f      	ldr	r3, [pc, #380]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eee:	d012      	beq.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005ef0:	e023      	b.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ef2:	4b59      	ldr	r3, [pc, #356]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005efe:	d107      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fbc7 	bl	8006698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f0e:	e0fc      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f14:	e0f9      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f16:	4b50      	ldr	r3, [pc, #320]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f22:	d107      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f24:	f107 0318 	add.w	r3, r7, #24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 f90d 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f32:	e0ea      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f38:	e0e7      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f3e:	e0e4      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f44:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	f040 808d 	bne.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005f4e:	4b42      	ldr	r3, [pc, #264]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f52:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f5e:	d06b      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f66:	d874      	bhi.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6e:	d056      	beq.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d86c      	bhi.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f7e:	d03b      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f86:	d864      	bhi.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f8e:	d021      	beq.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f96:	d85c      	bhi.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fa4:	d004      	beq.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005fa6:	e054      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005fa8:	f000 f8b8 	bl	800611c <HAL_RCCEx_GetD3PCLK1Freq>
 8005fac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005fae:	e0ac      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fb0:	4b29      	ldr	r3, [pc, #164]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fbc:	d107      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fbe:	f107 0318 	add.w	r3, r7, #24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f8c0 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fcc:	e09d      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fd2:	e09a      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fd4:	4b20      	ldr	r3, [pc, #128]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe0:	d107      	bne.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fe2:	f107 030c 	add.w	r3, r7, #12
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fa02 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ff0:	e08b      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ff6:	e088      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ff8:	4b17      	ldr	r3, [pc, #92]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b04      	cmp	r3, #4
 8006002:	d109      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006004:	4b14      	ldr	r3, [pc, #80]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	08db      	lsrs	r3, r3, #3
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	4a13      	ldr	r2, [pc, #76]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
 8006014:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006016:	e078      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800601c:	e075      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800601e:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602a:	d102      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800602e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006030:	e06b      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006036:	e068      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006038:	4b07      	ldr	r3, [pc, #28]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006044:	d102      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006046:	4b07      	ldr	r3, [pc, #28]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800604a:	e05e      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006050:	e05b      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006056:	e058      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006058:	58024400 	.word	0x58024400
 800605c:	03d09000 	.word	0x03d09000
 8006060:	003d0900 	.word	0x003d0900
 8006064:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800606c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006070:	430b      	orrs	r3, r1
 8006072:	d148      	bne.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006074:	4b27      	ldr	r3, [pc, #156]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006078:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800607c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006084:	d02a      	beq.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800608c:	d838      	bhi.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800609a:	d00d      	beq.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800609c:	e030      	b.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800609e:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060aa:	d102      	bne.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060b0:	e02b      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060b6:	e028      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060b8:	4b16      	ldr	r3, [pc, #88]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060c4:	d107      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fae4 	bl	8006698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060d4:	e019      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060da:	e016      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060dc:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e8:	d107      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ea:	f107 0318 	add.w	r3, r7, #24
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 f82a 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060f8:	e007      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060fe:	e004      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006104:	e001      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800610a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800610c:	4618      	mov	r0, r3
 800610e:	3740      	adds	r7, #64	; 0x40
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	58024400 	.word	0x58024400
 8006118:	017d7840 	.word	0x017d7840

0800611c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006120:	f7fe f816 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b06      	ldr	r3, [pc, #24]	; (8006140 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	4904      	ldr	r1, [pc, #16]	; (8006144 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800613c:	4618      	mov	r0, r3
 800613e:	bd80      	pop	{r7, pc}
 8006140:	58024400 	.word	0x58024400
 8006144:	080086f8 	.word	0x080086f8

08006148 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	; 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006150:	4ba1      	ldr	r3, [pc, #644]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800615a:	4b9f      	ldr	r3, [pc, #636]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	0b1b      	lsrs	r3, r3, #12
 8006160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006164:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006166:	4b9c      	ldr	r3, [pc, #624]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	091b      	lsrs	r3, r3, #4
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006172:	4b99      	ldr	r3, [pc, #612]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006176:	08db      	lsrs	r3, r3, #3
 8006178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 8111 	beq.w	80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b02      	cmp	r3, #2
 800619a:	f000 8083 	beq.w	80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	f200 80a1 	bhi.w	80062e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d056      	beq.n	8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80061b2:	e099      	b.n	80062e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061b4:	4b88      	ldr	r3, [pc, #544]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d02d      	beq.n	800621c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061c0:	4b85      	ldr	r3, [pc, #532]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	08db      	lsrs	r3, r3, #3
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	4a84      	ldr	r2, [pc, #528]	; (80063dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
 80061d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	ee07 3a90 	vmov	s15, r3
 80061d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ea:	4b7b      	ldr	r3, [pc, #492]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800620e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006216:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800621a:	e087      	b.n	800632c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006226:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80063e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800622a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622e:	4b6a      	ldr	r3, [pc, #424]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006242:	eddf 5a67 	vldr	s11, [pc, #412]	; 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800625e:	e065      	b.n	800632c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800626e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006272:	4b59      	ldr	r3, [pc, #356]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006282:	ed97 6a03 	vldr	s12, [r7, #12]
 8006286:	eddf 5a56 	vldr	s11, [pc, #344]	; 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800628a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062a2:	e043      	b.n	800632c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80062b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b6:	4b48      	ldr	r3, [pc, #288]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062e6:	e021      	b.n	800632c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fa:	4b37      	ldr	r3, [pc, #220]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630a:	ed97 6a03 	vldr	s12, [r7, #12]
 800630e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800631e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800632a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800632c:	4b2a      	ldr	r3, [pc, #168]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	0a5b      	lsrs	r3, r3, #9
 8006332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006342:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006346:	edd7 6a07 	vldr	s13, [r7, #28]
 800634a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800634e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006352:	ee17 2a90 	vmov	r2, s15
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800635a:	4b1f      	ldr	r3, [pc, #124]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006370:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006374:	edd7 6a07 	vldr	s13, [r7, #28]
 8006378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800637c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006380:	ee17 2a90 	vmov	r2, s15
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006388:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	0e1b      	lsrs	r3, r3, #24
 800638e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800639e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ae:	ee17 2a90 	vmov	r2, s15
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063b6:	e008      	b.n	80063ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]
}
 80063ca:	bf00      	nop
 80063cc:	3724      	adds	r7, #36	; 0x24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	58024400 	.word	0x58024400
 80063dc:	03d09000 	.word	0x03d09000
 80063e0:	46000000 	.word	0x46000000
 80063e4:	4c742400 	.word	0x4c742400
 80063e8:	4a742400 	.word	0x4a742400
 80063ec:	4bbebc20 	.word	0x4bbebc20

080063f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b089      	sub	sp, #36	; 0x24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063f8:	4ba1      	ldr	r3, [pc, #644]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006402:	4b9f      	ldr	r3, [pc, #636]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	0d1b      	lsrs	r3, r3, #20
 8006408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800640c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800640e:	4b9c      	ldr	r3, [pc, #624]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800641a:	4b99      	ldr	r3, [pc, #612]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641e:	08db      	lsrs	r3, r3, #3
 8006420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006432:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8111 	beq.w	8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b02      	cmp	r3, #2
 8006442:	f000 8083 	beq.w	800654c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b02      	cmp	r3, #2
 800644a:	f200 80a1 	bhi.w	8006590 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d056      	beq.n	8006508 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800645a:	e099      	b.n	8006590 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800645c:	4b88      	ldr	r3, [pc, #544]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d02d      	beq.n	80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006468:	4b85      	ldr	r3, [pc, #532]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	08db      	lsrs	r3, r3, #3
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	4a84      	ldr	r2, [pc, #528]	; (8006684 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
 8006478:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	ee07 3a90 	vmov	s15, r3
 8006480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006492:	4b7b      	ldr	r3, [pc, #492]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064c2:	e087      	b.n	80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800668c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80064d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d6:	4b6a      	ldr	r3, [pc, #424]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006506:	e065      	b.n	80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006512:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651a:	4b59      	ldr	r3, [pc, #356]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652a:	ed97 6a03 	vldr	s12, [r7, #12]
 800652e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800653e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800654a:	e043      	b.n	80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	ee07 3a90 	vmov	s15, r3
 8006552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006556:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800655a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800655e:	4b48      	ldr	r3, [pc, #288]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006572:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800657a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800657e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800658e:	e021      	b.n	80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800659e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a2:	4b37      	ldr	r3, [pc, #220]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80065d4:	4b2a      	ldr	r3, [pc, #168]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	0a5b      	lsrs	r3, r3, #9
 80065da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80065f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065fa:	ee17 2a90 	vmov	r2, s15
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006602:	4b1f      	ldr	r3, [pc, #124]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	0c1b      	lsrs	r3, r3, #16
 8006608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006618:	ee37 7a87 	vadd.f32	s14, s15, s14
 800661c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006628:	ee17 2a90 	vmov	r2, s15
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006630:	4b13      	ldr	r3, [pc, #76]	; (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	0e1b      	lsrs	r3, r3, #24
 8006636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006646:	ee37 7a87 	vadd.f32	s14, s15, s14
 800664a:	edd7 6a07 	vldr	s13, [r7, #28]
 800664e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006656:	ee17 2a90 	vmov	r2, s15
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800665e:	e008      	b.n	8006672 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	609a      	str	r2, [r3, #8]
}
 8006672:	bf00      	nop
 8006674:	3724      	adds	r7, #36	; 0x24
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	58024400 	.word	0x58024400
 8006684:	03d09000 	.word	0x03d09000
 8006688:	46000000 	.word	0x46000000
 800668c:	4c742400 	.word	0x4c742400
 8006690:	4a742400 	.word	0x4a742400
 8006694:	4bbebc20 	.word	0x4bbebc20

08006698 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006698:	b480      	push	{r7}
 800669a:	b089      	sub	sp, #36	; 0x24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066a0:	4ba0      	ldr	r3, [pc, #640]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80066aa:	4b9e      	ldr	r3, [pc, #632]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	091b      	lsrs	r3, r3, #4
 80066b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80066b6:	4b9b      	ldr	r3, [pc, #620]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066c0:	4b98      	ldr	r3, [pc, #608]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	08db      	lsrs	r3, r3, #3
 80066c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	fb02 f303 	mul.w	r3, r2, r3
 80066d0:	ee07 3a90 	vmov	s15, r3
 80066d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 8111 	beq.w	8006906 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	f000 8083 	beq.w	80067f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	f200 80a1 	bhi.w	8006836 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d056      	beq.n	80067ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006700:	e099      	b.n	8006836 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006702:	4b88      	ldr	r3, [pc, #544]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d02d      	beq.n	800676a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800670e:	4b85      	ldr	r3, [pc, #532]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	4a83      	ldr	r2, [pc, #524]	; (8006928 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	ee07 3a90 	vmov	s15, r3
 8006730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006738:	4b7a      	ldr	r3, [pc, #488]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006740:	ee07 3a90 	vmov	s15, r3
 8006744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006748:	ed97 6a03 	vldr	s12, [r7, #12]
 800674c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800692c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800675c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006764:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006768:	e087      	b.n	800687a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	ee07 3a90 	vmov	s15, r3
 8006770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006774:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006930 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800677c:	4b69      	ldr	r3, [pc, #420]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800678c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006790:	eddf 5a66 	vldr	s11, [pc, #408]	; 800692c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800679c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067ac:	e065      	b.n	800687a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	ee07 3a90 	vmov	s15, r3
 80067b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006934 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80067bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c0:	4b58      	ldr	r3, [pc, #352]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80067d4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800692c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067f0:	e043      	b.n	800687a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	ee07 3a90 	vmov	s15, r3
 80067f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006938 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006804:	4b47      	ldr	r3, [pc, #284]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006814:	ed97 6a03 	vldr	s12, [r7, #12]
 8006818:	eddf 5a44 	vldr	s11, [pc, #272]	; 800692c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800681c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800682c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006830:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006834:	e021      	b.n	800687a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	ee07 3a90 	vmov	s15, r3
 800683c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006840:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006930 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006848:	4b36      	ldr	r3, [pc, #216]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006850:	ee07 3a90 	vmov	s15, r3
 8006854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006858:	ed97 6a03 	vldr	s12, [r7, #12]
 800685c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800692c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006860:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800686c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006874:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006878:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800687a:	4b2a      	ldr	r3, [pc, #168]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	0a5b      	lsrs	r3, r3, #9
 8006880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006884:	ee07 3a90 	vmov	s15, r3
 8006888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006890:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006894:	edd7 6a07 	vldr	s13, [r7, #28]
 8006898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800689c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a0:	ee17 2a90 	vmov	r2, s15
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80068a8:	4b1e      	ldr	r3, [pc, #120]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	0c1b      	lsrs	r3, r3, #16
 80068ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ce:	ee17 2a90 	vmov	r2, s15
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80068d6:	4b13      	ldr	r3, [pc, #76]	; (8006924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	0e1b      	lsrs	r3, r3, #24
 80068dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e0:	ee07 3a90 	vmov	s15, r3
 80068e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80068f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068fc:	ee17 2a90 	vmov	r2, s15
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006904:	e008      	b.n	8006918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	bf00      	nop
 800691a:	3724      	adds	r7, #36	; 0x24
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	58024400 	.word	0x58024400
 8006928:	03d09000 	.word	0x03d09000
 800692c:	46000000 	.word	0x46000000
 8006930:	4c742400 	.word	0x4c742400
 8006934:	4a742400 	.word	0x4a742400
 8006938:	4bbebc20 	.word	0x4bbebc20

0800693c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800694a:	4b53      	ldr	r3, [pc, #332]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	2b03      	cmp	r3, #3
 8006954:	d101      	bne.n	800695a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e099      	b.n	8006a8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800695a:	4b4f      	ldr	r3, [pc, #316]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a4e      	ldr	r2, [pc, #312]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006960:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006966:	f7fb f8a1 	bl	8001aac <HAL_GetTick>
 800696a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800696c:	e008      	b.n	8006980 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800696e:	f7fb f89d 	bl	8001aac <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e086      	b.n	8006a8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006980:	4b45      	ldr	r3, [pc, #276]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1f0      	bne.n	800696e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800698c:	4b42      	ldr	r3, [pc, #264]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 800698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006990:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	031b      	lsls	r3, r3, #12
 800699a:	493f      	ldr	r1, [pc, #252]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 800699c:	4313      	orrs	r3, r2
 800699e:	628b      	str	r3, [r1, #40]	; 0x28
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	025b      	lsls	r3, r3, #9
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	041b      	lsls	r3, r3, #16
 80069be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	061b      	lsls	r3, r3, #24
 80069cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069d0:	4931      	ldr	r1, [pc, #196]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069d6:	4b30      	ldr	r3, [pc, #192]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	492d      	ldr	r1, [pc, #180]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069e8:	4b2b      	ldr	r3, [pc, #172]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	f023 0220 	bic.w	r2, r3, #32
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	4928      	ldr	r1, [pc, #160]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069fa:	4b27      	ldr	r3, [pc, #156]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	4a26      	ldr	r2, [pc, #152]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a00:	f023 0310 	bic.w	r3, r3, #16
 8006a04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a06:	4b24      	ldr	r3, [pc, #144]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a0a:	4b24      	ldr	r3, [pc, #144]	; (8006a9c <RCCEx_PLL2_Config+0x160>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	69d2      	ldr	r2, [r2, #28]
 8006a12:	00d2      	lsls	r2, r2, #3
 8006a14:	4920      	ldr	r1, [pc, #128]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a1a:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	4a1e      	ldr	r2, [pc, #120]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a20:	f043 0310 	orr.w	r3, r3, #16
 8006a24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d106      	bne.n	8006a3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	4a19      	ldr	r2, [pc, #100]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a38:	e00f      	b.n	8006a5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d106      	bne.n	8006a4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a40:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	4a14      	ldr	r2, [pc, #80]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a4c:	e005      	b.n	8006a5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a4e:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	4a11      	ldr	r2, [pc, #68]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a5a:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a0e      	ldr	r2, [pc, #56]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a66:	f7fb f821 	bl	8001aac <HAL_GetTick>
 8006a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a6c:	e008      	b.n	8006a80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a6e:	f7fb f81d 	bl	8001aac <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e006      	b.n	8006a8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <RCCEx_PLL2_Config+0x15c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f0      	beq.n	8006a6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	58024400 	.word	0x58024400
 8006a9c:	ffff0007 	.word	0xffff0007

08006aa0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006aae:	4b53      	ldr	r3, [pc, #332]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d101      	bne.n	8006abe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e099      	b.n	8006bf2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006abe:	4b4f      	ldr	r3, [pc, #316]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a4e      	ldr	r2, [pc, #312]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aca:	f7fa ffef 	bl	8001aac <HAL_GetTick>
 8006ace:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ad0:	e008      	b.n	8006ae4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ad2:	f7fa ffeb 	bl	8001aac <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d901      	bls.n	8006ae4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e086      	b.n	8006bf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ae4:	4b45      	ldr	r3, [pc, #276]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1f0      	bne.n	8006ad2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006af0:	4b42      	ldr	r3, [pc, #264]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	051b      	lsls	r3, r3, #20
 8006afe:	493f      	ldr	r1, [pc, #252]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	628b      	str	r3, [r1, #40]	; 0x28
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	025b      	lsls	r3, r3, #9
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	041b      	lsls	r3, r3, #16
 8006b22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	061b      	lsls	r3, r3, #24
 8006b30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b34:	4931      	ldr	r1, [pc, #196]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b3a:	4b30      	ldr	r3, [pc, #192]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	492d      	ldr	r1, [pc, #180]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b4c:	4b2b      	ldr	r3, [pc, #172]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	4928      	ldr	r1, [pc, #160]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b5e:	4b27      	ldr	r3, [pc, #156]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	4a26      	ldr	r2, [pc, #152]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b6a:	4b24      	ldr	r3, [pc, #144]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b6e:	4b24      	ldr	r3, [pc, #144]	; (8006c00 <RCCEx_PLL3_Config+0x160>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	69d2      	ldr	r2, [r2, #28]
 8006b76:	00d2      	lsls	r2, r2, #3
 8006b78:	4920      	ldr	r1, [pc, #128]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b7e:	4b1f      	ldr	r3, [pc, #124]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	4a1e      	ldr	r2, [pc, #120]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d106      	bne.n	8006b9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b90:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	4a19      	ldr	r2, [pc, #100]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006b96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b9c:	e00f      	b.n	8006bbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d106      	bne.n	8006bb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ba4:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	4a14      	ldr	r2, [pc, #80]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006baa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bb0:	e005      	b.n	8006bbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bb2:	4b12      	ldr	r3, [pc, #72]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006bb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bbe:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a0e      	ldr	r2, [pc, #56]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bca:	f7fa ff6f 	bl	8001aac <HAL_GetTick>
 8006bce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bd0:	e008      	b.n	8006be4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bd2:	f7fa ff6b 	bl	8001aac <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e006      	b.n	8006bf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <RCCEx_PLL3_Config+0x15c>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f0      	beq.n	8006bd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	ffff0007 	.word	0xffff0007

08006c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e049      	b.n	8006caa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fa fd52 	bl	80016d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f000 f99e 	bl	8006f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d001      	beq.n	8006ccc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e04c      	b.n	8006d66 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a26      	ldr	r2, [pc, #152]	; (8006d74 <HAL_TIM_Base_Start+0xc0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d022      	beq.n	8006d24 <HAL_TIM_Base_Start+0x70>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce6:	d01d      	beq.n	8006d24 <HAL_TIM_Base_Start+0x70>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a22      	ldr	r2, [pc, #136]	; (8006d78 <HAL_TIM_Base_Start+0xc4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d018      	beq.n	8006d24 <HAL_TIM_Base_Start+0x70>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a21      	ldr	r2, [pc, #132]	; (8006d7c <HAL_TIM_Base_Start+0xc8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d013      	beq.n	8006d24 <HAL_TIM_Base_Start+0x70>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <HAL_TIM_Base_Start+0xcc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00e      	beq.n	8006d24 <HAL_TIM_Base_Start+0x70>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a1e      	ldr	r2, [pc, #120]	; (8006d84 <HAL_TIM_Base_Start+0xd0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d009      	beq.n	8006d24 <HAL_TIM_Base_Start+0x70>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a1c      	ldr	r2, [pc, #112]	; (8006d88 <HAL_TIM_Base_Start+0xd4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d004      	beq.n	8006d24 <HAL_TIM_Base_Start+0x70>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1b      	ldr	r2, [pc, #108]	; (8006d8c <HAL_TIM_Base_Start+0xd8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d115      	bne.n	8006d50 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	4b19      	ldr	r3, [pc, #100]	; (8006d90 <HAL_TIM_Base_Start+0xdc>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b06      	cmp	r3, #6
 8006d34:	d015      	beq.n	8006d62 <HAL_TIM_Base_Start+0xae>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3c:	d011      	beq.n	8006d62 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0201 	orr.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4e:	e008      	b.n	8006d62 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0201 	orr.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	e000      	b.n	8006d64 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40010000 	.word	0x40010000
 8006d78:	40000400 	.word	0x40000400
 8006d7c:	40000800 	.word	0x40000800
 8006d80:	40000c00 	.word	0x40000c00
 8006d84:	40010400 	.word	0x40010400
 8006d88:	40001800 	.word	0x40001800
 8006d8c:	40014000 	.word	0x40014000
 8006d90:	00010007 	.word	0x00010007

08006d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_TIM_ConfigClockSource+0x1c>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e0dc      	b.n	8006f6a <HAL_TIM_ConfigClockSource+0x1d6>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	4b6a      	ldr	r3, [pc, #424]	; (8006f74 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a64      	ldr	r2, [pc, #400]	; (8006f78 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	f000 80a9 	beq.w	8006f3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006dec:	4a62      	ldr	r2, [pc, #392]	; (8006f78 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	f200 80ae 	bhi.w	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006df4:	4a61      	ldr	r2, [pc, #388]	; (8006f7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	f000 80a1 	beq.w	8006f3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006dfc:	4a5f      	ldr	r2, [pc, #380]	; (8006f7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	f200 80a6 	bhi.w	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e04:	4a5e      	ldr	r2, [pc, #376]	; (8006f80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	f000 8099 	beq.w	8006f3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e0c:	4a5c      	ldr	r2, [pc, #368]	; (8006f80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	f200 809e 	bhi.w	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e18:	f000 8091 	beq.w	8006f3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e20:	f200 8096 	bhi.w	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e28:	f000 8089 	beq.w	8006f3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e30:	f200 808e 	bhi.w	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e38:	d03e      	beq.n	8006eb8 <HAL_TIM_ConfigClockSource+0x124>
 8006e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e3e:	f200 8087 	bhi.w	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e46:	f000 8086 	beq.w	8006f56 <HAL_TIM_ConfigClockSource+0x1c2>
 8006e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4e:	d87f      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e50:	2b70      	cmp	r3, #112	; 0x70
 8006e52:	d01a      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0xf6>
 8006e54:	2b70      	cmp	r3, #112	; 0x70
 8006e56:	d87b      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e58:	2b60      	cmp	r3, #96	; 0x60
 8006e5a:	d050      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0x16a>
 8006e5c:	2b60      	cmp	r3, #96	; 0x60
 8006e5e:	d877      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e60:	2b50      	cmp	r3, #80	; 0x50
 8006e62:	d03c      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0x14a>
 8006e64:	2b50      	cmp	r3, #80	; 0x50
 8006e66:	d873      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e68:	2b40      	cmp	r3, #64	; 0x40
 8006e6a:	d058      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x18a>
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d86f      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e70:	2b30      	cmp	r3, #48	; 0x30
 8006e72:	d064      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e74:	2b30      	cmp	r3, #48	; 0x30
 8006e76:	d86b      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d060      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d867      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d05c      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	d05a      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e88:	e062      	b.n	8006f50 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e9a:	f000 f997 	bl	80071cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	609a      	str	r2, [r3, #8]
      break;
 8006eb6:	e04f      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ec8:	f000 f980 	bl	80071cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eda:	609a      	str	r2, [r3, #8]
      break;
 8006edc:	e03c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eea:	461a      	mov	r2, r3
 8006eec:	f000 f8f0 	bl	80070d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2150      	movs	r1, #80	; 0x50
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 f94a 	bl	8007190 <TIM_ITRx_SetConfig>
      break;
 8006efc:	e02c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f000 f90f 	bl	800712e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2160      	movs	r1, #96	; 0x60
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 f93a 	bl	8007190 <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e01c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f000 f8d0 	bl	80070d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2140      	movs	r1, #64	; 0x40
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f92a 	bl	8007190 <TIM_ITRx_SetConfig>
      break;
 8006f3c:	e00c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4619      	mov	r1, r3
 8006f48:	4610      	mov	r0, r2
 8006f4a:	f000 f921 	bl	8007190 <TIM_ITRx_SetConfig>
      break;
 8006f4e:	e003      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	73fb      	strb	r3, [r7, #15]
      break;
 8006f54:	e000      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	ffceff88 	.word	0xffceff88
 8006f78:	00100040 	.word	0x00100040
 8006f7c:	00100030 	.word	0x00100030
 8006f80:	00100020 	.word	0x00100020

08006f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a46      	ldr	r2, [pc, #280]	; (80070b0 <TIM_Base_SetConfig+0x12c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d013      	beq.n	8006fc4 <TIM_Base_SetConfig+0x40>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa2:	d00f      	beq.n	8006fc4 <TIM_Base_SetConfig+0x40>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a43      	ldr	r2, [pc, #268]	; (80070b4 <TIM_Base_SetConfig+0x130>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00b      	beq.n	8006fc4 <TIM_Base_SetConfig+0x40>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a42      	ldr	r2, [pc, #264]	; (80070b8 <TIM_Base_SetConfig+0x134>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <TIM_Base_SetConfig+0x40>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a41      	ldr	r2, [pc, #260]	; (80070bc <TIM_Base_SetConfig+0x138>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_Base_SetConfig+0x40>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a40      	ldr	r2, [pc, #256]	; (80070c0 <TIM_Base_SetConfig+0x13c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d108      	bne.n	8006fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a35      	ldr	r2, [pc, #212]	; (80070b0 <TIM_Base_SetConfig+0x12c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01f      	beq.n	800701e <TIM_Base_SetConfig+0x9a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe4:	d01b      	beq.n	800701e <TIM_Base_SetConfig+0x9a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a32      	ldr	r2, [pc, #200]	; (80070b4 <TIM_Base_SetConfig+0x130>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d017      	beq.n	800701e <TIM_Base_SetConfig+0x9a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a31      	ldr	r2, [pc, #196]	; (80070b8 <TIM_Base_SetConfig+0x134>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <TIM_Base_SetConfig+0x9a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a30      	ldr	r2, [pc, #192]	; (80070bc <TIM_Base_SetConfig+0x138>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00f      	beq.n	800701e <TIM_Base_SetConfig+0x9a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a2f      	ldr	r2, [pc, #188]	; (80070c0 <TIM_Base_SetConfig+0x13c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00b      	beq.n	800701e <TIM_Base_SetConfig+0x9a>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a2e      	ldr	r2, [pc, #184]	; (80070c4 <TIM_Base_SetConfig+0x140>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d007      	beq.n	800701e <TIM_Base_SetConfig+0x9a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a2d      	ldr	r2, [pc, #180]	; (80070c8 <TIM_Base_SetConfig+0x144>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d003      	beq.n	800701e <TIM_Base_SetConfig+0x9a>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a2c      	ldr	r2, [pc, #176]	; (80070cc <TIM_Base_SetConfig+0x148>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d108      	bne.n	8007030 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <TIM_Base_SetConfig+0x12c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00f      	beq.n	800707c <TIM_Base_SetConfig+0xf8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a18      	ldr	r2, [pc, #96]	; (80070c0 <TIM_Base_SetConfig+0x13c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00b      	beq.n	800707c <TIM_Base_SetConfig+0xf8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a17      	ldr	r2, [pc, #92]	; (80070c4 <TIM_Base_SetConfig+0x140>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d007      	beq.n	800707c <TIM_Base_SetConfig+0xf8>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a16      	ldr	r2, [pc, #88]	; (80070c8 <TIM_Base_SetConfig+0x144>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <TIM_Base_SetConfig+0xf8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a15      	ldr	r2, [pc, #84]	; (80070cc <TIM_Base_SetConfig+0x148>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d103      	bne.n	8007084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b01      	cmp	r3, #1
 8007094:	d105      	bne.n	80070a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f023 0201 	bic.w	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	611a      	str	r2, [r3, #16]
  }
}
 80070a2:	bf00      	nop
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40010000 	.word	0x40010000
 80070b4:	40000400 	.word	0x40000400
 80070b8:	40000800 	.word	0x40000800
 80070bc:	40000c00 	.word	0x40000c00
 80070c0:	40010400 	.word	0x40010400
 80070c4:	40014000 	.word	0x40014000
 80070c8:	40014400 	.word	0x40014400
 80070cc:	40014800 	.word	0x40014800

080070d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0201 	bic.w	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f023 030a 	bic.w	r3, r3, #10
 800710c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800712e:	b480      	push	{r7}
 8007130:	b087      	sub	sp, #28
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f023 0210 	bic.w	r2, r3, #16
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007158:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	031b      	lsls	r3, r3, #12
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800716a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	4313      	orrs	r3, r2
 8007174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
	...

08007190 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <TIM_ITRx_SetConfig+0x38>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f043 0307 	orr.w	r3, r3, #7
 80071b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	609a      	str	r2, [r3, #8]
}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	ffcfff8f 	.word	0xffcfff8f

080071cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	021a      	lsls	r2, r3, #8
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	609a      	str	r2, [r3, #8]
}
 8007200:	bf00      	nop
 8007202:	371c      	adds	r7, #28
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007220:	2302      	movs	r3, #2
 8007222:	e06d      	b.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a30      	ldr	r2, [pc, #192]	; (800730c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a2f      	ldr	r2, [pc, #188]	; (8007310 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d108      	bne.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800725e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007270:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a20      	ldr	r2, [pc, #128]	; (800730c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d022      	beq.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007296:	d01d      	beq.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d018      	beq.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1c      	ldr	r2, [pc, #112]	; (8007318 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d013      	beq.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a1a      	ldr	r2, [pc, #104]	; (800731c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00e      	beq.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a15      	ldr	r2, [pc, #84]	; (8007310 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d009      	beq.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a16      	ldr	r2, [pc, #88]	; (8007320 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d004      	beq.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a15      	ldr	r2, [pc, #84]	; (8007324 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d10c      	bne.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	40010000 	.word	0x40010000
 8007310:	40010400 	.word	0x40010400
 8007314:	40000400 	.word	0x40000400
 8007318:	40000800 	.word	0x40000800
 800731c:	40000c00 	.word	0x40000c00
 8007320:	40001800 	.word	0x40001800
 8007324:	40014000 	.word	0x40014000

08007328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e042      	b.n	80073c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007340:	2b00      	cmp	r3, #0
 8007342:	d106      	bne.n	8007352 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fa f9e1 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2224      	movs	r2, #36	; 0x24
 8007356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0201 	bic.w	r2, r2, #1
 8007368:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fe1e 	bl	8007fb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f8b3 	bl	80074e4 <UART_SetConfig>
 800737e:	4603      	mov	r3, r0
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e01b      	b.n	80073c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fe9d 	bl	80080f8 <UART_CheckIdleState>
 80073be:	4603      	mov	r3, r0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	; 0x28
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	4613      	mov	r3, r2
 80073d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d17b      	bne.n	80074da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <HAL_UART_Transmit+0x26>
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e074      	b.n	80074dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2221      	movs	r2, #33	; 0x21
 80073fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007402:	f7fa fb53 	bl	8001aac <HAL_GetTick>
 8007406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007420:	d108      	bne.n	8007434 <HAL_UART_Transmit+0x6c>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	e003      	b.n	800743c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007438:	2300      	movs	r3, #0
 800743a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800743c:	e030      	b.n	80074a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2200      	movs	r2, #0
 8007446:	2180      	movs	r1, #128	; 0x80
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 feff 	bl	800824c <UART_WaitOnFlagUntilTimeout>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2220      	movs	r2, #32
 8007458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e03d      	b.n	80074dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007474:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	3302      	adds	r3, #2
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	e007      	b.n	800748e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	3301      	adds	r3, #1
 800748c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007494:	b29b      	uxth	r3, r3
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1c8      	bne.n	800743e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2200      	movs	r2, #0
 80074b4:	2140      	movs	r1, #64	; 0x40
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 fec8 	bl	800824c <UART_WaitOnFlagUntilTimeout>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e006      	b.n	80074dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	e000      	b.n	80074dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80074da:	2302      	movs	r3, #2
  }
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3720      	adds	r7, #32
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074e8:	b092      	sub	sp, #72	; 0x48
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	431a      	orrs	r2, r3
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	4313      	orrs	r3, r2
 800750a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4bbe      	ldr	r3, [pc, #760]	; (800780c <UART_SetConfig+0x328>)
 8007514:	4013      	ands	r3, r2
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	6812      	ldr	r2, [r2, #0]
 800751a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800751c:	430b      	orrs	r3, r1
 800751e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4ab3      	ldr	r2, [pc, #716]	; (8007810 <UART_SetConfig+0x32c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d004      	beq.n	8007550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800754c:	4313      	orrs	r3, r2
 800754e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	4baf      	ldr	r3, [pc, #700]	; (8007814 <UART_SetConfig+0x330>)
 8007558:	4013      	ands	r3, r2
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007560:	430b      	orrs	r3, r1
 8007562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	f023 010f 	bic.w	r1, r3, #15
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4aa6      	ldr	r2, [pc, #664]	; (8007818 <UART_SetConfig+0x334>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d177      	bne.n	8007674 <UART_SetConfig+0x190>
 8007584:	4ba5      	ldr	r3, [pc, #660]	; (800781c <UART_SetConfig+0x338>)
 8007586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800758c:	2b28      	cmp	r3, #40	; 0x28
 800758e:	d86d      	bhi.n	800766c <UART_SetConfig+0x188>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0xb4>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	0800763d 	.word	0x0800763d
 800759c:	0800766d 	.word	0x0800766d
 80075a0:	0800766d 	.word	0x0800766d
 80075a4:	0800766d 	.word	0x0800766d
 80075a8:	0800766d 	.word	0x0800766d
 80075ac:	0800766d 	.word	0x0800766d
 80075b0:	0800766d 	.word	0x0800766d
 80075b4:	0800766d 	.word	0x0800766d
 80075b8:	08007645 	.word	0x08007645
 80075bc:	0800766d 	.word	0x0800766d
 80075c0:	0800766d 	.word	0x0800766d
 80075c4:	0800766d 	.word	0x0800766d
 80075c8:	0800766d 	.word	0x0800766d
 80075cc:	0800766d 	.word	0x0800766d
 80075d0:	0800766d 	.word	0x0800766d
 80075d4:	0800766d 	.word	0x0800766d
 80075d8:	0800764d 	.word	0x0800764d
 80075dc:	0800766d 	.word	0x0800766d
 80075e0:	0800766d 	.word	0x0800766d
 80075e4:	0800766d 	.word	0x0800766d
 80075e8:	0800766d 	.word	0x0800766d
 80075ec:	0800766d 	.word	0x0800766d
 80075f0:	0800766d 	.word	0x0800766d
 80075f4:	0800766d 	.word	0x0800766d
 80075f8:	08007655 	.word	0x08007655
 80075fc:	0800766d 	.word	0x0800766d
 8007600:	0800766d 	.word	0x0800766d
 8007604:	0800766d 	.word	0x0800766d
 8007608:	0800766d 	.word	0x0800766d
 800760c:	0800766d 	.word	0x0800766d
 8007610:	0800766d 	.word	0x0800766d
 8007614:	0800766d 	.word	0x0800766d
 8007618:	0800765d 	.word	0x0800765d
 800761c:	0800766d 	.word	0x0800766d
 8007620:	0800766d 	.word	0x0800766d
 8007624:	0800766d 	.word	0x0800766d
 8007628:	0800766d 	.word	0x0800766d
 800762c:	0800766d 	.word	0x0800766d
 8007630:	0800766d 	.word	0x0800766d
 8007634:	0800766d 	.word	0x0800766d
 8007638:	08007665 	.word	0x08007665
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007642:	e222      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007644:	2304      	movs	r3, #4
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764a:	e21e      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800764c:	2308      	movs	r3, #8
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007652:	e21a      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007654:	2310      	movs	r3, #16
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765a:	e216      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800765c:	2320      	movs	r3, #32
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007662:	e212      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007664:	2340      	movs	r3, #64	; 0x40
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766a:	e20e      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800766c:	2380      	movs	r3, #128	; 0x80
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007672:	e20a      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a69      	ldr	r2, [pc, #420]	; (8007820 <UART_SetConfig+0x33c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d130      	bne.n	80076e0 <UART_SetConfig+0x1fc>
 800767e:	4b67      	ldr	r3, [pc, #412]	; (800781c <UART_SetConfig+0x338>)
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b05      	cmp	r3, #5
 8007688:	d826      	bhi.n	80076d8 <UART_SetConfig+0x1f4>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <UART_SetConfig+0x1ac>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076a9 	.word	0x080076a9
 8007694:	080076b1 	.word	0x080076b1
 8007698:	080076b9 	.word	0x080076b9
 800769c:	080076c1 	.word	0x080076c1
 80076a0:	080076c9 	.word	0x080076c9
 80076a4:	080076d1 	.word	0x080076d1
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ae:	e1ec      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80076b0:	2304      	movs	r3, #4
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b6:	e1e8      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80076b8:	2308      	movs	r3, #8
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076be:	e1e4      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80076c0:	2310      	movs	r3, #16
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c6:	e1e0      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80076c8:	2320      	movs	r3, #32
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ce:	e1dc      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80076d0:	2340      	movs	r3, #64	; 0x40
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d6:	e1d8      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80076d8:	2380      	movs	r3, #128	; 0x80
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076de:	e1d4      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a4f      	ldr	r2, [pc, #316]	; (8007824 <UART_SetConfig+0x340>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d130      	bne.n	800774c <UART_SetConfig+0x268>
 80076ea:	4b4c      	ldr	r3, [pc, #304]	; (800781c <UART_SetConfig+0x338>)
 80076ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	2b05      	cmp	r3, #5
 80076f4:	d826      	bhi.n	8007744 <UART_SetConfig+0x260>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <UART_SetConfig+0x218>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007715 	.word	0x08007715
 8007700:	0800771d 	.word	0x0800771d
 8007704:	08007725 	.word	0x08007725
 8007708:	0800772d 	.word	0x0800772d
 800770c:	08007735 	.word	0x08007735
 8007710:	0800773d 	.word	0x0800773d
 8007714:	2300      	movs	r3, #0
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771a:	e1b6      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800771c:	2304      	movs	r3, #4
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e1b2      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007724:	2308      	movs	r3, #8
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772a:	e1ae      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800772c:	2310      	movs	r3, #16
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007732:	e1aa      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007734:	2320      	movs	r3, #32
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773a:	e1a6      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800773c:	2340      	movs	r3, #64	; 0x40
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007742:	e1a2      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007744:	2380      	movs	r3, #128	; 0x80
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774a:	e19e      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a35      	ldr	r2, [pc, #212]	; (8007828 <UART_SetConfig+0x344>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d130      	bne.n	80077b8 <UART_SetConfig+0x2d4>
 8007756:	4b31      	ldr	r3, [pc, #196]	; (800781c <UART_SetConfig+0x338>)
 8007758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	2b05      	cmp	r3, #5
 8007760:	d826      	bhi.n	80077b0 <UART_SetConfig+0x2cc>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <UART_SetConfig+0x284>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	08007781 	.word	0x08007781
 800776c:	08007789 	.word	0x08007789
 8007770:	08007791 	.word	0x08007791
 8007774:	08007799 	.word	0x08007799
 8007778:	080077a1 	.word	0x080077a1
 800777c:	080077a9 	.word	0x080077a9
 8007780:	2300      	movs	r3, #0
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007786:	e180      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007788:	2304      	movs	r3, #4
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778e:	e17c      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007790:	2308      	movs	r3, #8
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007796:	e178      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007798:	2310      	movs	r3, #16
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800779e:	e174      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80077a0:	2320      	movs	r3, #32
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a6:	e170      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80077a8:	2340      	movs	r3, #64	; 0x40
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ae:	e16c      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80077b0:	2380      	movs	r3, #128	; 0x80
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b6:	e168      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a1b      	ldr	r2, [pc, #108]	; (800782c <UART_SetConfig+0x348>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d142      	bne.n	8007848 <UART_SetConfig+0x364>
 80077c2:	4b16      	ldr	r3, [pc, #88]	; (800781c <UART_SetConfig+0x338>)
 80077c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d838      	bhi.n	8007840 <UART_SetConfig+0x35c>
 80077ce:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <UART_SetConfig+0x2f0>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	080077ed 	.word	0x080077ed
 80077d8:	080077f5 	.word	0x080077f5
 80077dc:	080077fd 	.word	0x080077fd
 80077e0:	08007805 	.word	0x08007805
 80077e4:	08007831 	.word	0x08007831
 80077e8:	08007839 	.word	0x08007839
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e14a      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80077f4:	2304      	movs	r3, #4
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fa:	e146      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80077fc:	2308      	movs	r3, #8
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007802:	e142      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007804:	2310      	movs	r3, #16
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800780a:	e13e      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800780c:	cfff69f3 	.word	0xcfff69f3
 8007810:	58000c00 	.word	0x58000c00
 8007814:	11fff4ff 	.word	0x11fff4ff
 8007818:	40011000 	.word	0x40011000
 800781c:	58024400 	.word	0x58024400
 8007820:	40004400 	.word	0x40004400
 8007824:	40004800 	.word	0x40004800
 8007828:	40004c00 	.word	0x40004c00
 800782c:	40005000 	.word	0x40005000
 8007830:	2320      	movs	r3, #32
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007836:	e128      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007838:	2340      	movs	r3, #64	; 0x40
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783e:	e124      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007840:	2380      	movs	r3, #128	; 0x80
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007846:	e120      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4acb      	ldr	r2, [pc, #812]	; (8007b7c <UART_SetConfig+0x698>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d176      	bne.n	8007940 <UART_SetConfig+0x45c>
 8007852:	4bcb      	ldr	r3, [pc, #812]	; (8007b80 <UART_SetConfig+0x69c>)
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800785a:	2b28      	cmp	r3, #40	; 0x28
 800785c:	d86c      	bhi.n	8007938 <UART_SetConfig+0x454>
 800785e:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <UART_SetConfig+0x380>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007909 	.word	0x08007909
 8007868:	08007939 	.word	0x08007939
 800786c:	08007939 	.word	0x08007939
 8007870:	08007939 	.word	0x08007939
 8007874:	08007939 	.word	0x08007939
 8007878:	08007939 	.word	0x08007939
 800787c:	08007939 	.word	0x08007939
 8007880:	08007939 	.word	0x08007939
 8007884:	08007911 	.word	0x08007911
 8007888:	08007939 	.word	0x08007939
 800788c:	08007939 	.word	0x08007939
 8007890:	08007939 	.word	0x08007939
 8007894:	08007939 	.word	0x08007939
 8007898:	08007939 	.word	0x08007939
 800789c:	08007939 	.word	0x08007939
 80078a0:	08007939 	.word	0x08007939
 80078a4:	08007919 	.word	0x08007919
 80078a8:	08007939 	.word	0x08007939
 80078ac:	08007939 	.word	0x08007939
 80078b0:	08007939 	.word	0x08007939
 80078b4:	08007939 	.word	0x08007939
 80078b8:	08007939 	.word	0x08007939
 80078bc:	08007939 	.word	0x08007939
 80078c0:	08007939 	.word	0x08007939
 80078c4:	08007921 	.word	0x08007921
 80078c8:	08007939 	.word	0x08007939
 80078cc:	08007939 	.word	0x08007939
 80078d0:	08007939 	.word	0x08007939
 80078d4:	08007939 	.word	0x08007939
 80078d8:	08007939 	.word	0x08007939
 80078dc:	08007939 	.word	0x08007939
 80078e0:	08007939 	.word	0x08007939
 80078e4:	08007929 	.word	0x08007929
 80078e8:	08007939 	.word	0x08007939
 80078ec:	08007939 	.word	0x08007939
 80078f0:	08007939 	.word	0x08007939
 80078f4:	08007939 	.word	0x08007939
 80078f8:	08007939 	.word	0x08007939
 80078fc:	08007939 	.word	0x08007939
 8007900:	08007939 	.word	0x08007939
 8007904:	08007931 	.word	0x08007931
 8007908:	2301      	movs	r3, #1
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790e:	e0bc      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007910:	2304      	movs	r3, #4
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007916:	e0b8      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007918:	2308      	movs	r3, #8
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791e:	e0b4      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007920:	2310      	movs	r3, #16
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007926:	e0b0      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007928:	2320      	movs	r3, #32
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792e:	e0ac      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007930:	2340      	movs	r3, #64	; 0x40
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007936:	e0a8      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007938:	2380      	movs	r3, #128	; 0x80
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793e:	e0a4      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a8f      	ldr	r2, [pc, #572]	; (8007b84 <UART_SetConfig+0x6a0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d130      	bne.n	80079ac <UART_SetConfig+0x4c8>
 800794a:	4b8d      	ldr	r3, [pc, #564]	; (8007b80 <UART_SetConfig+0x69c>)
 800794c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	2b05      	cmp	r3, #5
 8007954:	d826      	bhi.n	80079a4 <UART_SetConfig+0x4c0>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <UART_SetConfig+0x478>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	08007975 	.word	0x08007975
 8007960:	0800797d 	.word	0x0800797d
 8007964:	08007985 	.word	0x08007985
 8007968:	0800798d 	.word	0x0800798d
 800796c:	08007995 	.word	0x08007995
 8007970:	0800799d 	.word	0x0800799d
 8007974:	2300      	movs	r3, #0
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797a:	e086      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800797c:	2304      	movs	r3, #4
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007982:	e082      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007984:	2308      	movs	r3, #8
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798a:	e07e      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800798c:	2310      	movs	r3, #16
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007992:	e07a      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007994:	2320      	movs	r3, #32
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799a:	e076      	b.n	8007a8a <UART_SetConfig+0x5a6>
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a2:	e072      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80079a4:	2380      	movs	r3, #128	; 0x80
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079aa:	e06e      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a75      	ldr	r2, [pc, #468]	; (8007b88 <UART_SetConfig+0x6a4>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d130      	bne.n	8007a18 <UART_SetConfig+0x534>
 80079b6:	4b72      	ldr	r3, [pc, #456]	; (8007b80 <UART_SetConfig+0x69c>)
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d826      	bhi.n	8007a10 <UART_SetConfig+0x52c>
 80079c2:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <UART_SetConfig+0x4e4>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	080079e1 	.word	0x080079e1
 80079cc:	080079e9 	.word	0x080079e9
 80079d0:	080079f1 	.word	0x080079f1
 80079d4:	080079f9 	.word	0x080079f9
 80079d8:	08007a01 	.word	0x08007a01
 80079dc:	08007a09 	.word	0x08007a09
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e6:	e050      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80079e8:	2304      	movs	r3, #4
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ee:	e04c      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80079f0:	2308      	movs	r3, #8
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f6:	e048      	b.n	8007a8a <UART_SetConfig+0x5a6>
 80079f8:	2310      	movs	r3, #16
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fe:	e044      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a00:	2320      	movs	r3, #32
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a06:	e040      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a08:	2340      	movs	r3, #64	; 0x40
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0e:	e03c      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a10:	2380      	movs	r3, #128	; 0x80
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a16:	e038      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a5b      	ldr	r2, [pc, #364]	; (8007b8c <UART_SetConfig+0x6a8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d130      	bne.n	8007a84 <UART_SetConfig+0x5a0>
 8007a22:	4b57      	ldr	r3, [pc, #348]	; (8007b80 <UART_SetConfig+0x69c>)
 8007a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	d826      	bhi.n	8007a7c <UART_SetConfig+0x598>
 8007a2e:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <UART_SetConfig+0x550>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a4d 	.word	0x08007a4d
 8007a38:	08007a55 	.word	0x08007a55
 8007a3c:	08007a5d 	.word	0x08007a5d
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a6d 	.word	0x08007a6d
 8007a48:	08007a75 	.word	0x08007a75
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a52:	e01a      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a54:	2304      	movs	r3, #4
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5a:	e016      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a5c:	2308      	movs	r3, #8
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a62:	e012      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a64:	2310      	movs	r3, #16
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6a:	e00e      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a6c:	2320      	movs	r3, #32
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a72:	e00a      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a74:	2340      	movs	r3, #64	; 0x40
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7a:	e006      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a7c:	2380      	movs	r3, #128	; 0x80
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a82:	e002      	b.n	8007a8a <UART_SetConfig+0x5a6>
 8007a84:	2380      	movs	r3, #128	; 0x80
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a3f      	ldr	r2, [pc, #252]	; (8007b8c <UART_SetConfig+0x6a8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	f040 80f8 	bne.w	8007c86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	dc46      	bgt.n	8007b2c <UART_SetConfig+0x648>
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	f2c0 8082 	blt.w	8007ba8 <UART_SetConfig+0x6c4>
 8007aa4:	3b02      	subs	r3, #2
 8007aa6:	2b1e      	cmp	r3, #30
 8007aa8:	d87e      	bhi.n	8007ba8 <UART_SetConfig+0x6c4>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <UART_SetConfig+0x5cc>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007b33 	.word	0x08007b33
 8007ab4:	08007ba9 	.word	0x08007ba9
 8007ab8:	08007b3b 	.word	0x08007b3b
 8007abc:	08007ba9 	.word	0x08007ba9
 8007ac0:	08007ba9 	.word	0x08007ba9
 8007ac4:	08007ba9 	.word	0x08007ba9
 8007ac8:	08007b4b 	.word	0x08007b4b
 8007acc:	08007ba9 	.word	0x08007ba9
 8007ad0:	08007ba9 	.word	0x08007ba9
 8007ad4:	08007ba9 	.word	0x08007ba9
 8007ad8:	08007ba9 	.word	0x08007ba9
 8007adc:	08007ba9 	.word	0x08007ba9
 8007ae0:	08007ba9 	.word	0x08007ba9
 8007ae4:	08007ba9 	.word	0x08007ba9
 8007ae8:	08007b5b 	.word	0x08007b5b
 8007aec:	08007ba9 	.word	0x08007ba9
 8007af0:	08007ba9 	.word	0x08007ba9
 8007af4:	08007ba9 	.word	0x08007ba9
 8007af8:	08007ba9 	.word	0x08007ba9
 8007afc:	08007ba9 	.word	0x08007ba9
 8007b00:	08007ba9 	.word	0x08007ba9
 8007b04:	08007ba9 	.word	0x08007ba9
 8007b08:	08007ba9 	.word	0x08007ba9
 8007b0c:	08007ba9 	.word	0x08007ba9
 8007b10:	08007ba9 	.word	0x08007ba9
 8007b14:	08007ba9 	.word	0x08007ba9
 8007b18:	08007ba9 	.word	0x08007ba9
 8007b1c:	08007ba9 	.word	0x08007ba9
 8007b20:	08007ba9 	.word	0x08007ba9
 8007b24:	08007ba9 	.word	0x08007ba9
 8007b28:	08007b9b 	.word	0x08007b9b
 8007b2c:	2b40      	cmp	r3, #64	; 0x40
 8007b2e:	d037      	beq.n	8007ba0 <UART_SetConfig+0x6bc>
 8007b30:	e03a      	b.n	8007ba8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007b32:	f7fe faf3 	bl	800611c <HAL_RCCEx_GetD3PCLK1Freq>
 8007b36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b38:	e03c      	b.n	8007bb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fb02 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b48:	e034      	b.n	8007bb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b4a:	f107 0318 	add.w	r3, r7, #24
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe fc4e 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b58:	e02c      	b.n	8007bb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b5a:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <UART_SetConfig+0x69c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0320 	and.w	r3, r3, #32
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d016      	beq.n	8007b94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b66:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <UART_SetConfig+0x69c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	08db      	lsrs	r3, r3, #3
 8007b6c:	f003 0303 	and.w	r3, r3, #3
 8007b70:	4a07      	ldr	r2, [pc, #28]	; (8007b90 <UART_SetConfig+0x6ac>)
 8007b72:	fa22 f303 	lsr.w	r3, r2, r3
 8007b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b78:	e01c      	b.n	8007bb4 <UART_SetConfig+0x6d0>
 8007b7a:	bf00      	nop
 8007b7c:	40011400 	.word	0x40011400
 8007b80:	58024400 	.word	0x58024400
 8007b84:	40007800 	.word	0x40007800
 8007b88:	40007c00 	.word	0x40007c00
 8007b8c:	58000c00 	.word	0x58000c00
 8007b90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007b94:	4b9d      	ldr	r3, [pc, #628]	; (8007e0c <UART_SetConfig+0x928>)
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b98:	e00c      	b.n	8007bb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b9a:	4b9d      	ldr	r3, [pc, #628]	; (8007e10 <UART_SetConfig+0x92c>)
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b9e:	e009      	b.n	8007bb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ba6:	e005      	b.n	8007bb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007bb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 81de 	beq.w	8007f78 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	4a94      	ldr	r2, [pc, #592]	; (8007e14 <UART_SetConfig+0x930>)
 8007bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bca:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	4413      	add	r3, r2
 8007bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d305      	bcc.n	8007bec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d903      	bls.n	8007bf4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007bf2:	e1c1      	b.n	8007f78 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	60bb      	str	r3, [r7, #8]
 8007bfa:	60fa      	str	r2, [r7, #12]
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	4a84      	ldr	r2, [pc, #528]	; (8007e14 <UART_SetConfig+0x930>)
 8007c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	2200      	movs	r2, #0
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	607a      	str	r2, [r7, #4]
 8007c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c16:	f7f8 fb67 	bl	80002e8 <__aeabi_uldivmod>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4619      	mov	r1, r3
 8007c22:	f04f 0200 	mov.w	r2, #0
 8007c26:	f04f 0300 	mov.w	r3, #0
 8007c2a:	020b      	lsls	r3, r1, #8
 8007c2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c30:	0202      	lsls	r2, r0, #8
 8007c32:	6979      	ldr	r1, [r7, #20]
 8007c34:	6849      	ldr	r1, [r1, #4]
 8007c36:	0849      	lsrs	r1, r1, #1
 8007c38:	2000      	movs	r0, #0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	eb12 0804 	adds.w	r8, r2, r4
 8007c42:	eb43 0905 	adc.w	r9, r3, r5
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	469a      	mov	sl, r3
 8007c4e:	4693      	mov	fp, r2
 8007c50:	4652      	mov	r2, sl
 8007c52:	465b      	mov	r3, fp
 8007c54:	4640      	mov	r0, r8
 8007c56:	4649      	mov	r1, r9
 8007c58:	f7f8 fb46 	bl	80002e8 <__aeabi_uldivmod>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4613      	mov	r3, r2
 8007c62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6a:	d308      	bcc.n	8007c7e <UART_SetConfig+0x79a>
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c72:	d204      	bcs.n	8007c7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7a:	60da      	str	r2, [r3, #12]
 8007c7c:	e17c      	b.n	8007f78 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c84:	e178      	b.n	8007f78 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c8e:	f040 80c5 	bne.w	8007e1c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007c92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	dc48      	bgt.n	8007d2c <UART_SetConfig+0x848>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	db7b      	blt.n	8007d96 <UART_SetConfig+0x8b2>
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d879      	bhi.n	8007d96 <UART_SetConfig+0x8b2>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0x7c4>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007d33 	.word	0x08007d33
 8007cac:	08007d3b 	.word	0x08007d3b
 8007cb0:	08007d97 	.word	0x08007d97
 8007cb4:	08007d97 	.word	0x08007d97
 8007cb8:	08007d43 	.word	0x08007d43
 8007cbc:	08007d97 	.word	0x08007d97
 8007cc0:	08007d97 	.word	0x08007d97
 8007cc4:	08007d97 	.word	0x08007d97
 8007cc8:	08007d53 	.word	0x08007d53
 8007ccc:	08007d97 	.word	0x08007d97
 8007cd0:	08007d97 	.word	0x08007d97
 8007cd4:	08007d97 	.word	0x08007d97
 8007cd8:	08007d97 	.word	0x08007d97
 8007cdc:	08007d97 	.word	0x08007d97
 8007ce0:	08007d97 	.word	0x08007d97
 8007ce4:	08007d97 	.word	0x08007d97
 8007ce8:	08007d63 	.word	0x08007d63
 8007cec:	08007d97 	.word	0x08007d97
 8007cf0:	08007d97 	.word	0x08007d97
 8007cf4:	08007d97 	.word	0x08007d97
 8007cf8:	08007d97 	.word	0x08007d97
 8007cfc:	08007d97 	.word	0x08007d97
 8007d00:	08007d97 	.word	0x08007d97
 8007d04:	08007d97 	.word	0x08007d97
 8007d08:	08007d97 	.word	0x08007d97
 8007d0c:	08007d97 	.word	0x08007d97
 8007d10:	08007d97 	.word	0x08007d97
 8007d14:	08007d97 	.word	0x08007d97
 8007d18:	08007d97 	.word	0x08007d97
 8007d1c:	08007d97 	.word	0x08007d97
 8007d20:	08007d97 	.word	0x08007d97
 8007d24:	08007d97 	.word	0x08007d97
 8007d28:	08007d89 	.word	0x08007d89
 8007d2c:	2b40      	cmp	r3, #64	; 0x40
 8007d2e:	d02e      	beq.n	8007d8e <UART_SetConfig+0x8aa>
 8007d30:	e031      	b.n	8007d96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d32:	f7fc fa3d 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8007d36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d38:	e033      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d3a:	f7fc fa4f 	bl	80041dc <HAL_RCC_GetPCLK2Freq>
 8007d3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d40:	e02f      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe f9fe 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d50:	e027      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d52:	f107 0318 	add.w	r3, r7, #24
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe fb4a 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d60:	e01f      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d62:	4b2d      	ldr	r3, [pc, #180]	; (8007e18 <UART_SetConfig+0x934>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d6e:	4b2a      	ldr	r3, [pc, #168]	; (8007e18 <UART_SetConfig+0x934>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	08db      	lsrs	r3, r3, #3
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	4a24      	ldr	r2, [pc, #144]	; (8007e0c <UART_SetConfig+0x928>)
 8007d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d80:	e00f      	b.n	8007da2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d82:	4b22      	ldr	r3, [pc, #136]	; (8007e0c <UART_SetConfig+0x928>)
 8007d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d86:	e00c      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d88:	4b21      	ldr	r3, [pc, #132]	; (8007e10 <UART_SetConfig+0x92c>)
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d8c:	e009      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d94:	e005      	b.n	8007da2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007da0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 80e7 	beq.w	8007f78 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	4a19      	ldr	r2, [pc, #100]	; (8007e14 <UART_SetConfig+0x930>)
 8007db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dbc:	005a      	lsls	r2, r3, #1
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	085b      	lsrs	r3, r3, #1
 8007dc4:	441a      	add	r2, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	2b0f      	cmp	r3, #15
 8007dd4:	d916      	bls.n	8007e04 <UART_SetConfig+0x920>
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ddc:	d212      	bcs.n	8007e04 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f023 030f 	bic.w	r3, r3, #15
 8007de6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	085b      	lsrs	r3, r3, #1
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007df6:	4313      	orrs	r3, r2
 8007df8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007e00:	60da      	str	r2, [r3, #12]
 8007e02:	e0b9      	b.n	8007f78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007e0a:	e0b5      	b.n	8007f78 <UART_SetConfig+0xa94>
 8007e0c:	03d09000 	.word	0x03d09000
 8007e10:	003d0900 	.word	0x003d0900
 8007e14:	08008708 	.word	0x08008708
 8007e18:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	dc49      	bgt.n	8007eb8 <UART_SetConfig+0x9d4>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	db7c      	blt.n	8007f22 <UART_SetConfig+0xa3e>
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d87a      	bhi.n	8007f22 <UART_SetConfig+0xa3e>
 8007e2c:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <UART_SetConfig+0x950>)
 8007e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e32:	bf00      	nop
 8007e34:	08007ebf 	.word	0x08007ebf
 8007e38:	08007ec7 	.word	0x08007ec7
 8007e3c:	08007f23 	.word	0x08007f23
 8007e40:	08007f23 	.word	0x08007f23
 8007e44:	08007ecf 	.word	0x08007ecf
 8007e48:	08007f23 	.word	0x08007f23
 8007e4c:	08007f23 	.word	0x08007f23
 8007e50:	08007f23 	.word	0x08007f23
 8007e54:	08007edf 	.word	0x08007edf
 8007e58:	08007f23 	.word	0x08007f23
 8007e5c:	08007f23 	.word	0x08007f23
 8007e60:	08007f23 	.word	0x08007f23
 8007e64:	08007f23 	.word	0x08007f23
 8007e68:	08007f23 	.word	0x08007f23
 8007e6c:	08007f23 	.word	0x08007f23
 8007e70:	08007f23 	.word	0x08007f23
 8007e74:	08007eef 	.word	0x08007eef
 8007e78:	08007f23 	.word	0x08007f23
 8007e7c:	08007f23 	.word	0x08007f23
 8007e80:	08007f23 	.word	0x08007f23
 8007e84:	08007f23 	.word	0x08007f23
 8007e88:	08007f23 	.word	0x08007f23
 8007e8c:	08007f23 	.word	0x08007f23
 8007e90:	08007f23 	.word	0x08007f23
 8007e94:	08007f23 	.word	0x08007f23
 8007e98:	08007f23 	.word	0x08007f23
 8007e9c:	08007f23 	.word	0x08007f23
 8007ea0:	08007f23 	.word	0x08007f23
 8007ea4:	08007f23 	.word	0x08007f23
 8007ea8:	08007f23 	.word	0x08007f23
 8007eac:	08007f23 	.word	0x08007f23
 8007eb0:	08007f23 	.word	0x08007f23
 8007eb4:	08007f15 	.word	0x08007f15
 8007eb8:	2b40      	cmp	r3, #64	; 0x40
 8007eba:	d02e      	beq.n	8007f1a <UART_SetConfig+0xa36>
 8007ebc:	e031      	b.n	8007f22 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ebe:	f7fc f977 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8007ec2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ec4:	e033      	b.n	8007f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ec6:	f7fc f989 	bl	80041dc <HAL_RCC_GetPCLK2Freq>
 8007eca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ecc:	e02f      	b.n	8007f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe f938 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007edc:	e027      	b.n	8007f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ede:	f107 0318 	add.w	r3, r7, #24
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe fa84 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eec:	e01f      	b.n	8007f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eee:	4b2d      	ldr	r3, [pc, #180]	; (8007fa4 <UART_SetConfig+0xac0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d009      	beq.n	8007f0e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007efa:	4b2a      	ldr	r3, [pc, #168]	; (8007fa4 <UART_SetConfig+0xac0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	08db      	lsrs	r3, r3, #3
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	4a28      	ldr	r2, [pc, #160]	; (8007fa8 <UART_SetConfig+0xac4>)
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f0c:	e00f      	b.n	8007f2e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007f0e:	4b26      	ldr	r3, [pc, #152]	; (8007fa8 <UART_SetConfig+0xac4>)
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f12:	e00c      	b.n	8007f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f14:	4b25      	ldr	r3, [pc, #148]	; (8007fac <UART_SetConfig+0xac8>)
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f18:	e009      	b.n	8007f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f20:	e005      	b.n	8007f2e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f2c:	bf00      	nop
    }

    if (pclk != 0U)
 8007f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d021      	beq.n	8007f78 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	4a1d      	ldr	r2, [pc, #116]	; (8007fb0 <UART_SetConfig+0xacc>)
 8007f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f42:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	441a      	add	r2, r3
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	2b0f      	cmp	r3, #15
 8007f5c:	d909      	bls.n	8007f72 <UART_SetConfig+0xa8e>
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f64:	d205      	bcs.n	8007f72 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60da      	str	r2, [r3, #12]
 8007f70:	e002      	b.n	8007f78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2200      	movs	r2, #0
 8007f92:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f94:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3748      	adds	r7, #72	; 0x48
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fa2:	bf00      	nop
 8007fa4:	58024400 	.word	0x58024400
 8007fa8:	03d09000 	.word	0x03d09000
 8007fac:	003d0900 	.word	0x003d0900
 8007fb0:	08008708 	.word	0x08008708

08007fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	f003 0308 	and.w	r3, r3, #8
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00a      	beq.n	8007fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00a      	beq.n	8008022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00a      	beq.n	8008066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806a:	f003 0320 	and.w	r3, r3, #32
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008090:	2b00      	cmp	r3, #0
 8008092:	d01a      	beq.n	80080ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b2:	d10a      	bne.n	80080ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	605a      	str	r2, [r3, #4]
  }
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b098      	sub	sp, #96	; 0x60
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008108:	f7f9 fcd0 	bl	8001aac <HAL_GetTick>
 800810c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0308 	and.w	r3, r3, #8
 8008118:	2b08      	cmp	r3, #8
 800811a:	d12f      	bne.n	800817c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800811c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008124:	2200      	movs	r2, #0
 8008126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f88e 	bl	800824c <UART_WaitOnFlagUntilTimeout>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d022      	beq.n	800817c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800814a:	653b      	str	r3, [r7, #80]	; 0x50
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008154:	647b      	str	r3, [r7, #68]	; 0x44
 8008156:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800815a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e6      	bne.n	8008136 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e063      	b.n	8008244 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0304 	and.w	r3, r3, #4
 8008186:	2b04      	cmp	r3, #4
 8008188:	d149      	bne.n	800821e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800818a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008192:	2200      	movs	r2, #0
 8008194:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f857 	bl	800824c <UART_WaitOnFlagUntilTimeout>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d03c      	beq.n	800821e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	623b      	str	r3, [r7, #32]
   return(result);
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c2:	633b      	str	r3, [r7, #48]	; 0x30
 80081c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e6      	bne.n	80081a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3308      	adds	r3, #8
 80081f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081f6:	61fa      	str	r2, [r7, #28]
 80081f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	69b9      	ldr	r1, [r7, #24]
 80081fc:	69fa      	ldr	r2, [r7, #28]
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	617b      	str	r3, [r7, #20]
   return(result);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e5      	bne.n	80081d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e012      	b.n	8008244 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3758      	adds	r7, #88	; 0x58
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	4613      	mov	r3, r2
 800825a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800825c:	e04f      	b.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008264:	d04b      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008266:	f7f9 fc21 	bl	8001aac <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	429a      	cmp	r2, r3
 8008274:	d302      	bcc.n	800827c <UART_WaitOnFlagUntilTimeout+0x30>
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e04e      	b.n	800831e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d037      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2b80      	cmp	r3, #128	; 0x80
 8008292:	d034      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b40      	cmp	r3, #64	; 0x40
 8008298:	d031      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	f003 0308 	and.w	r3, r3, #8
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d110      	bne.n	80082ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2208      	movs	r2, #8
 80082ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f839 	bl	8008328 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2208      	movs	r2, #8
 80082ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e029      	b.n	800831e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d8:	d111      	bne.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 f81f 	bl	8008328 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e00f      	b.n	800831e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69da      	ldr	r2, [r3, #28]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	4013      	ands	r3, r2
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	429a      	cmp	r2, r3
 800830c:	bf0c      	ite	eq
 800830e:	2301      	moveq	r3, #1
 8008310:	2300      	movne	r3, #0
 8008312:	b2db      	uxtb	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	429a      	cmp	r2, r3
 800831a:	d0a0      	beq.n	800825e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008328:	b480      	push	{r7}
 800832a:	b095      	sub	sp, #84	; 0x54
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834e:	643b      	str	r3, [r7, #64]	; 0x40
 8008350:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e6      	bne.n	8008330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3308      	adds	r3, #8
 8008368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	61fb      	str	r3, [r7, #28]
   return(result);
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	4b1e      	ldr	r3, [pc, #120]	; (80083f0 <UART_EndRxTransfer+0xc8>)
 8008376:	4013      	ands	r3, r2
 8008378:	64bb      	str	r3, [r7, #72]	; 0x48
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3308      	adds	r3, #8
 8008380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e5      	bne.n	8008362 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800839a:	2b01      	cmp	r3, #1
 800839c:	d118      	bne.n	80083d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f023 0310 	bic.w	r3, r3, #16
 80083b2:	647b      	str	r3, [r7, #68]	; 0x44
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083bc:	61bb      	str	r3, [r7, #24]
 80083be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6979      	ldr	r1, [r7, #20]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	613b      	str	r3, [r7, #16]
   return(result);
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e6      	bne.n	800839e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80083e4:	bf00      	nop
 80083e6:	3754      	adds	r7, #84	; 0x54
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	effffffe 	.word	0xeffffffe

080083f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008402:	2b01      	cmp	r3, #1
 8008404:	d101      	bne.n	800840a <HAL_UARTEx_DisableFifoMode+0x16>
 8008406:	2302      	movs	r3, #2
 8008408:	e027      	b.n	800845a <HAL_UARTEx_DisableFifoMode+0x66>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2224      	movs	r2, #36	; 0x24
 8008416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0201 	bic.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008438:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2220      	movs	r2, #32
 800844c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008476:	2b01      	cmp	r3, #1
 8008478:	d101      	bne.n	800847e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800847a:	2302      	movs	r3, #2
 800847c:	e02d      	b.n	80084da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2224      	movs	r2, #36	; 0x24
 800848a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f850 	bl	8008560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e02d      	b.n	8008556 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2224      	movs	r2, #36	; 0x24
 8008506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0201 	bic.w	r2, r2, #1
 8008520:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f812 	bl	8008560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2220      	movs	r2, #32
 8008548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800856c:	2b00      	cmp	r3, #0
 800856e:	d108      	bne.n	8008582 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008580:	e031      	b.n	80085e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008582:	2310      	movs	r3, #16
 8008584:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008586:	2310      	movs	r3, #16
 8008588:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	0e5b      	lsrs	r3, r3, #25
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	0f5b      	lsrs	r3, r3, #29
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	7b3a      	ldrb	r2, [r7, #12]
 80085ae:	4911      	ldr	r1, [pc, #68]	; (80085f4 <UARTEx_SetNbDataToProcess+0x94>)
 80085b0:	5c8a      	ldrb	r2, [r1, r2]
 80085b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085b6:	7b3a      	ldrb	r2, [r7, #12]
 80085b8:	490f      	ldr	r1, [pc, #60]	; (80085f8 <UARTEx_SetNbDataToProcess+0x98>)
 80085ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	7b7a      	ldrb	r2, [r7, #13]
 80085cc:	4909      	ldr	r1, [pc, #36]	; (80085f4 <UARTEx_SetNbDataToProcess+0x94>)
 80085ce:	5c8a      	ldrb	r2, [r1, r2]
 80085d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085d4:	7b7a      	ldrb	r2, [r7, #13]
 80085d6:	4908      	ldr	r1, [pc, #32]	; (80085f8 <UARTEx_SetNbDataToProcess+0x98>)
 80085d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085da:	fb93 f3f2 	sdiv	r3, r3, r2
 80085de:	b29a      	uxth	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	08008720 	.word	0x08008720
 80085f8:	08008728 	.word	0x08008728

080085fc <memset>:
 80085fc:	4402      	add	r2, r0
 80085fe:	4603      	mov	r3, r0
 8008600:	4293      	cmp	r3, r2
 8008602:	d100      	bne.n	8008606 <memset+0xa>
 8008604:	4770      	bx	lr
 8008606:	f803 1b01 	strb.w	r1, [r3], #1
 800860a:	e7f9      	b.n	8008600 <memset+0x4>

0800860c <strncat>:
 800860c:	b530      	push	{r4, r5, lr}
 800860e:	4604      	mov	r4, r0
 8008610:	7825      	ldrb	r5, [r4, #0]
 8008612:	4623      	mov	r3, r4
 8008614:	3401      	adds	r4, #1
 8008616:	2d00      	cmp	r5, #0
 8008618:	d1fa      	bne.n	8008610 <strncat+0x4>
 800861a:	3a01      	subs	r2, #1
 800861c:	d304      	bcc.n	8008628 <strncat+0x1c>
 800861e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008622:	f803 4b01 	strb.w	r4, [r3], #1
 8008626:	b904      	cbnz	r4, 800862a <strncat+0x1e>
 8008628:	bd30      	pop	{r4, r5, pc}
 800862a:	2a00      	cmp	r2, #0
 800862c:	d1f5      	bne.n	800861a <strncat+0xe>
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	e7f3      	b.n	800861a <strncat+0xe>
	...

08008634 <__libc_init_array>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	4d0d      	ldr	r5, [pc, #52]	; (800866c <__libc_init_array+0x38>)
 8008638:	4c0d      	ldr	r4, [pc, #52]	; (8008670 <__libc_init_array+0x3c>)
 800863a:	1b64      	subs	r4, r4, r5
 800863c:	10a4      	asrs	r4, r4, #2
 800863e:	2600      	movs	r6, #0
 8008640:	42a6      	cmp	r6, r4
 8008642:	d109      	bne.n	8008658 <__libc_init_array+0x24>
 8008644:	4d0b      	ldr	r5, [pc, #44]	; (8008674 <__libc_init_array+0x40>)
 8008646:	4c0c      	ldr	r4, [pc, #48]	; (8008678 <__libc_init_array+0x44>)
 8008648:	f000 f818 	bl	800867c <_init>
 800864c:	1b64      	subs	r4, r4, r5
 800864e:	10a4      	asrs	r4, r4, #2
 8008650:	2600      	movs	r6, #0
 8008652:	42a6      	cmp	r6, r4
 8008654:	d105      	bne.n	8008662 <__libc_init_array+0x2e>
 8008656:	bd70      	pop	{r4, r5, r6, pc}
 8008658:	f855 3b04 	ldr.w	r3, [r5], #4
 800865c:	4798      	blx	r3
 800865e:	3601      	adds	r6, #1
 8008660:	e7ee      	b.n	8008640 <__libc_init_array+0xc>
 8008662:	f855 3b04 	ldr.w	r3, [r5], #4
 8008666:	4798      	blx	r3
 8008668:	3601      	adds	r6, #1
 800866a:	e7f2      	b.n	8008652 <__libc_init_array+0x1e>
 800866c:	08008738 	.word	0x08008738
 8008670:	08008738 	.word	0x08008738
 8008674:	08008738 	.word	0x08008738
 8008678:	0800873c 	.word	0x0800873c

0800867c <_init>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	bf00      	nop
 8008680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008682:	bc08      	pop	{r3}
 8008684:	469e      	mov	lr, r3
 8008686:	4770      	bx	lr

08008688 <_fini>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr
