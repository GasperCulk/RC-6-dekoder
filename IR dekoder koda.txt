IR dekoder koda

#define TSOP_PIN GPIO_PIN_10
#define TSOP_PORT GPIOH
#define BUFSIZE 256
#define N 22

char SendBuffer[BUFSIZE];

int main(void)
{
  HAL_Init();

  SystemClock_Config();
  PeriphCommonClock_Config();

  MX_GPIO_Init();
  MX_ADC3_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_USART3_UART_Init();

  HAL_TIM_Base_Start(&htim2);

  while (1)
  {
	if (HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN) == GPIO_PIN_RESET)
	{
		uint32_t message = decodeIRSignal();
		sendMessage(message);
	}
  }
}


uint32_t decodeIRSignal()
{
    uint32_t signal = 0;

    // 16000 to skip to the last 8 bits, 200 to mesure in the 1/4 of a periode
    //  8960 to skip to the last 16 bits
    //  3680 to skip to the first bit
    delay_x(3680);

    // (3 + ) 1 strat bit, 3 field bits, 1 (2 peridos) toggle bit, 8 addres bits, 8 command bits
    // n = 22, if mesuring from first start bit
    int bit[N] = {0};

    // read signal and wait 1 period
    for (int i = 0; i < N; i++) {
    	bit[i] = HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN);
    	delay_x(880);
	}

    // TSOP signal is inverted, so this for loop turs on bits that are low (logical 0)
    for (int i = 0; i < N; i++) {
    	if (bit[i] == 0) {
    		signal |= (1 << i);
    	}
	}


/*
 * this code was for testing, the fastest posible
 * !!! if using this code, change (31 - 0) to (0) !!!
    int bit0 = HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN);
    delay_x(880);
    int bit1 = HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN);
    delay_x(880);
    int bit2 = HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN);
    delay_x(880);
    int bit3 = HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN);
    delay_x(880);
    int bit4 = HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN);
    delay_x(880);
    int bit5 = HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN);
    delay_x(880);
    int bit6 = HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN);
    delay_x(880);
    int bit7 = HAL_GPIO_ReadPin(TSOP_PORT, TSOP_PIN);
    delay_x(880);

    if (bit0 == 1) {
    	signal |= (1 << (31 - 0));
    }
    if (bit1 == 1) {
    	signal |= (1 << (31 - 1));
    }
    if (bit2 == 1) {
    	signal |= (1 << (31 - 2));
    }
    if (bit3 == 1) {
    	signal |= (1 << (31 - 3));
    }
    if (bit4 == 1) {
    	signal |= (1 << (31 - 4));
    }
    if (bit5 == 1) {
    	signal |= (1 << (31 - 5));
    }
    if (bit6 == 1) {
    	signal |= (1 << (31 - 6));
    }
    if (bit7 == 1) {
    	signal |= (1 << (31 - 7));
    }
*/

    return signal;
}

void delay_x (uint16_t x)
{
	__HAL_TIM_SET_COUNTER(&htim2,0);
	while (__HAL_TIM_GET_COUNTER(&htim2) < x);
}

void sendMessage(uint32_t message) {
	// clear buffer
	memset(SendBuffer, 0, sizeof(SendBuffer));

	strncat(SendBuffer, "Message -> start bits: ", 23);
    for (int i = 0; i < 4; i++) {
        char bit = (message & (1 << i)) ? '1' : '0';
        strncat(SendBuffer, &bit, 1);
    }

    strncat(SendBuffer, " toggle: ", 9);
    for (int i = 4; i < 6; i++) {
        char bit = (message & (1 << i)) ? '1' : '0';
        strncat(SendBuffer, &bit, 1);
    }

    strncat(SendBuffer, " address: ", 10);
    for (int i = 6; i < 14; i++) {
        char bit = (message & (1 << i)) ? '1' : '0';
        strncat(SendBuffer, &bit, 1);
    }

    strncat(SendBuffer, " command: ", 10);
    for (int i = 14; i < 22; i++) {
        char bit = (message & (1 << i)) ? '1' : '0';
        strncat(SendBuffer, &bit, 1);
    }
    strncat(SendBuffer, "\r\n", 2);
    HAL_UART_Transmit(&huart3, (uint8_t *)SendBuffer, strlen(SendBuffer), HAL_MAX_DELAY);
}

void sendBinSignal(uint32_t message, uint16_t n) {
    snprintf(SendBuffer, BUFSIZE, "IR Bin Signal: ");

    for (int i = 0; i < n; i++) {
        char bit = (message & (1 << i)) ? '1' : '0';
        strncat(SendBuffer, &bit, 1);
    }
    strncat(SendBuffer, "\r\n", 2);
    HAL_UART_Transmit(&huart3, (uint8_t *)SendBuffer, strlen(SendBuffer), HAL_MAX_DELAY);
}

void sendDecSignal(uint32_t message)
{
  sprintf(SendBuffer, "IR Dec Signal: %u\r\n", message);
  HAL_UART_Transmit(&huart3, (uint8_t*)SendBuffer, strlen(SendBuffer), HAL_MAX_DELAY);
}